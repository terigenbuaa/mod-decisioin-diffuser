diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
index d62dc31..a47022a 100644
--- a/code/diffuser/models/diffusion.py
+++ b/code/diffuser/models/diffusion.py
@@ -369,8 +369,8 @@ class GaussianInvDynDiffusion(nn.Module):
             logger.print(f"load encode model from {checkpoint_path}")  
 
             # freeze encode model
-            for param in self.encode_model.parameters():
-                param.requires_grad = False
+            # for param in self.encode_model.parameters():
+            #     param.requires_grad = False
                    
             self.observation_dim = encoded_dim
             self.current_epoch = None
@@ -594,7 +594,8 @@ class GaussianInvDynDiffusion(nn.Module):
             new_epoch = False
 
         if new_epoch:
-            self.update_encoder_freeze(self.current_epoch)
+            # self.update_encoder_freeze(self.current_epoch)
+            pass
 
         if self.train_only_inv:
             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
index 516ab7e..81cd533 100644
--- a/code/analysis/train.slurm
+++ b/code/analysis/train.slurm
@@ -1,6 +1,6 @@
 #!/bin/bash
 #SBATCH -J load-ddfuser-grid
-#SBATCH -o res/unfreeze_by_layer.txt
+#SBATCH -o res/balance_loss.txt
 #SBATCH -c 32
 #SBATCH --gres=gpu:V100:1
 #SBATCH --exclude dell-gpu-23
diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
index a47022a..49375bc 100644
--- a/code/diffuser/models/diffusion.py
+++ b/code/diffuser/models/diffusion.py
@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
         pred_a = self.inv_model(x_comb_t)
 
         # get pred_a by inv_model from generated x_t and x_t_1
-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
 
         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
index 3b470ca..410268d 100644
--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
 +            pass
  
          if self.train_only_inv:
-             # Calculating inv loss
\ No newline at end of file
+             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+index 516ab7e..81cd533 100644
+--- a/code/analysis/train.slurm
++++ b/code/analysis/train.slurm
+@@ -1,6 +1,6 @@
+ #!/bin/bash
+ #SBATCH -J load-ddfuser-grid
+-#SBATCH -o res/unfreeze_by_layer.txt
++#SBATCH -o res/balance_loss.txt
+ #SBATCH -c 32
+ #SBATCH --gres=gpu:V100:1
+ #SBATCH --exclude dell-gpu-23
+diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+index a47022a..49375bc 100644
+--- a/code/diffuser/models/diffusion.py
++++ b/code/diffuser/models/diffusion.py
+@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         pred_a = self.inv_model(x_comb_t)
+ 
+         # get pred_a by inv_model from generated x_t and x_t_1
+-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+ 
+         return loss, info, balance_loss
\ No newline at end of file
diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
index 516ab7e..81cd533 100644
--- a/code/analysis/train.slurm
+++ b/code/analysis/train.slurm
@@ -1,6 +1,6 @@
 #!/bin/bash
 #SBATCH -J load-ddfuser-grid
-#SBATCH -o res/unfreeze_by_layer.txt
+#SBATCH -o res/balance_loss.txt
 #SBATCH -c 32
 #SBATCH --gres=gpu:V100:1
 #SBATCH --exclude dell-gpu-23
diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
index a47022a..ea24e74 100644
--- a/code/diffuser/models/diffusion.py
+++ b/code/diffuser/models/diffusion.py
@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
         obs = x_noisy - x_recon
         # decode obs to 409 dim
         decoded_obs = decode_data(self.encode_model, obs)
-        # assert decoded_obs.shape == (32, 100, 409)
+        assert decoded_obs.shape == (32, 100, 409)
         x_t = obs[:, :-1, :]
         x_t_1 = obs[:, 1:, :]
         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
         pred_a = self.inv_model(x_comb_t)
 
         # get pred_a by inv_model from generated x_t and x_t_1
-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
 
         return loss, info, balance_loss
 
diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
index 351f9d2..6721527 100644
--- a/code/diffuser/utils/training.py
+++ b/code/diffuser/utils/training.py
@@ -114,6 +114,8 @@ class Trainer(object):
         for step in range(n_train_steps):
             for i in range(self.gradient_accumulate_every):
                 batch = next(self.dataloader)
+                print(batch.shape)
+                continue
                 batch = batch_to_device(batch, device=self.device)
                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
                 loss = loss / self.gradient_accumulate_everydiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
index 3b470ca..5b2bb45 100644
--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
@@ -22,4 +22,108 @@ index d62dc31..a47022a 100644
 +            pass
  
          if self.train_only_inv:
-             # Calculating inv loss
\ No newline at end of file
+             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+index 516ab7e..81cd533 100644
+--- a/code/analysis/train.slurm
++++ b/code/analysis/train.slurm
+@@ -1,6 +1,6 @@
+ #!/bin/bash
+ #SBATCH -J load-ddfuser-grid
+-#SBATCH -o res/unfreeze_by_layer.txt
++#SBATCH -o res/balance_loss.txt
+ #SBATCH -c 32
+ #SBATCH --gres=gpu:V100:1
+ #SBATCH --exclude dell-gpu-23
+diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+index a47022a..49375bc 100644
+--- a/code/diffuser/models/diffusion.py
++++ b/code/diffuser/models/diffusion.py
+@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         pred_a = self.inv_model(x_comb_t)
+ 
+         # get pred_a by inv_model from generated x_t and x_t_1
+-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+ 
+         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+index 3b470ca..410268d 100644
+--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
+ +            pass
+  
+          if self.train_only_inv:
+-             # Calculating inv loss
+\ No newline at end of file
++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..49375bc 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
+\ No newline at end of file
+diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+index 516ab7e..81cd533 100644
+--- a/code/analysis/train.slurm
++++ b/code/analysis/train.slurm
+@@ -1,6 +1,6 @@
+ #!/bin/bash
+ #SBATCH -J load-ddfuser-grid
+-#SBATCH -o res/unfreeze_by_layer.txt
++#SBATCH -o res/balance_loss.txt
+ #SBATCH -c 32
+ #SBATCH --gres=gpu:V100:1
+ #SBATCH --exclude dell-gpu-23
+diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+index a47022a..ea24e74 100644
+--- a/code/diffuser/models/diffusion.py
++++ b/code/diffuser/models/diffusion.py
+@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         obs = x_noisy - x_recon
+         # decode obs to 409 dim
+         decoded_obs = decode_data(self.encode_model, obs)
+-        # assert decoded_obs.shape == (32, 100, 409)
++        assert decoded_obs.shape == (32, 100, 409)
+         x_t = obs[:, :-1, :]
+         x_t_1 = obs[:, 1:, :]
+         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         pred_a = self.inv_model(x_comb_t)
+ 
+         # get pred_a by inv_model from generated x_t and x_t_1
+-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+ 
+         return loss, info, balance_loss
+ 
+diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+index 351f9d2..6721527 100644
+--- a/code/diffuser/utils/training.py
++++ b/code/diffuser/utils/training.py
+@@ -114,6 +114,8 @@ class Trainer(object):
+         for step in range(n_train_steps):
+             for i in range(self.gradient_accumulate_every):
+                 batch = next(self.dataloader)
++                print(batch.shape)
++                continue
+                 batch = batch_to_device(batch, device=self.device)
+                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+                 loss = loss / self.gradient_accumulate_every
\ No newline at end of file
diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
index 516ab7e..81cd533 100644
--- a/code/analysis/train.slurm
+++ b/code/analysis/train.slurm
@@ -1,6 +1,6 @@
 #!/bin/bash
 #SBATCH -J load-ddfuser-grid
-#SBATCH -o res/unfreeze_by_layer.txt
+#SBATCH -o res/balance_loss.txt
 #SBATCH -c 32
 #SBATCH --gres=gpu:V100:1
 #SBATCH --exclude dell-gpu-23
diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
index a47022a..ea24e74 100644
--- a/code/diffuser/models/diffusion.py
+++ b/code/diffuser/models/diffusion.py
@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
         obs = x_noisy - x_recon
         # decode obs to 409 dim
         decoded_obs = decode_data(self.encode_model, obs)
-        # assert decoded_obs.shape == (32, 100, 409)
+        assert decoded_obs.shape == (32, 100, 409)
         x_t = obs[:, :-1, :]
         x_t_1 = obs[:, 1:, :]
         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
         pred_a = self.inv_model(x_comb_t)
 
         # get pred_a by inv_model from generated x_t and x_t_1
-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
 
         return loss, info, balance_loss
 
diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
index 351f9d2..187050e 100644
--- a/code/diffuser/utils/training.py
+++ b/code/diffuser/utils/training.py
@@ -114,6 +114,9 @@ class Trainer(object):
         for step in range(n_train_steps):
             for i in range(self.gradient_accumulate_every):
                 batch = next(self.dataloader)
+                traj, cond, ret = batch
+                print(traj.shape)
+                continue
                 batch = batch_to_device(batch, device=self.device)
                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
                 loss = loss / self.gradient_accumulate_everydiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
index 3b470ca..2dd66ba 100644
--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
@@ -22,4 +22,271 @@ index d62dc31..a47022a 100644
 +            pass
  
          if self.train_only_inv:
-             # Calculating inv loss
\ No newline at end of file
+             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+index 516ab7e..81cd533 100644
+--- a/code/analysis/train.slurm
++++ b/code/analysis/train.slurm
+@@ -1,6 +1,6 @@
+ #!/bin/bash
+ #SBATCH -J load-ddfuser-grid
+-#SBATCH -o res/unfreeze_by_layer.txt
++#SBATCH -o res/balance_loss.txt
+ #SBATCH -c 32
+ #SBATCH --gres=gpu:V100:1
+ #SBATCH --exclude dell-gpu-23
+diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+index a47022a..49375bc 100644
+--- a/code/diffuser/models/diffusion.py
++++ b/code/diffuser/models/diffusion.py
+@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         pred_a = self.inv_model(x_comb_t)
+ 
+         # get pred_a by inv_model from generated x_t and x_t_1
+-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+ 
+         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+index 3b470ca..410268d 100644
+--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
+ +            pass
+  
+          if self.train_only_inv:
+-             # Calculating inv loss
+\ No newline at end of file
++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..49375bc 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
+\ No newline at end of file
+diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+index 516ab7e..81cd533 100644
+--- a/code/analysis/train.slurm
++++ b/code/analysis/train.slurm
+@@ -1,6 +1,6 @@
+ #!/bin/bash
+ #SBATCH -J load-ddfuser-grid
+-#SBATCH -o res/unfreeze_by_layer.txt
++#SBATCH -o res/balance_loss.txt
+ #SBATCH -c 32
+ #SBATCH --gres=gpu:V100:1
+ #SBATCH --exclude dell-gpu-23
+diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+index a47022a..ea24e74 100644
+--- a/code/diffuser/models/diffusion.py
++++ b/code/diffuser/models/diffusion.py
+@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         obs = x_noisy - x_recon
+         # decode obs to 409 dim
+         decoded_obs = decode_data(self.encode_model, obs)
+-        # assert decoded_obs.shape == (32, 100, 409)
++        assert decoded_obs.shape == (32, 100, 409)
+         x_t = obs[:, :-1, :]
+         x_t_1 = obs[:, 1:, :]
+         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         pred_a = self.inv_model(x_comb_t)
+ 
+         # get pred_a by inv_model from generated x_t and x_t_1
+-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+ 
+         return loss, info, balance_loss
+ 
+diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+index 351f9d2..6721527 100644
+--- a/code/diffuser/utils/training.py
++++ b/code/diffuser/utils/training.py
+@@ -114,6 +114,8 @@ class Trainer(object):
+         for step in range(n_train_steps):
+             for i in range(self.gradient_accumulate_every):
+                 batch = next(self.dataloader)
++                print(batch.shape)
++                continue
+                 batch = batch_to_device(batch, device=self.device)
+                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+                 loss = loss / self.gradient_accumulate_everydiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+index 3b470ca..5b2bb45 100644
+--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+@@ -22,4 +22,108 @@ index d62dc31..a47022a 100644
+ +            pass
+  
+          if self.train_only_inv:
+-             # Calculating inv loss
+\ No newline at end of file
++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..49375bc 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++index 3b470ca..410268d 100644
++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
++ +            pass
++  
++          if self.train_only_inv:
++-             # Calculating inv loss
++\ No newline at end of file
+++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..49375bc 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
++\ No newline at end of file
++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..ea24e74 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         obs = x_noisy - x_recon
++         # decode obs to 409 dim
++         decoded_obs = decode_data(self.encode_model, obs)
++-        # assert decoded_obs.shape == (32, 100, 409)
+++        assert decoded_obs.shape == (32, 100, 409)
++         x_t = obs[:, :-1, :]
++         x_t_1 = obs[:, 1:, :]
++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
++ 
++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++index 351f9d2..6721527 100644
++--- a/code/diffuser/utils/training.py
+++++ b/code/diffuser/utils/training.py
++@@ -114,6 +114,8 @@ class Trainer(object):
++         for step in range(n_train_steps):
++             for i in range(self.gradient_accumulate_every):
++                 batch = next(self.dataloader)
+++                print(batch.shape)
+++                continue
++                 batch = batch_to_device(batch, device=self.device)
++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++                 loss = loss / self.gradient_accumulate_every
+\ No newline at end of file
+diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+index 516ab7e..81cd533 100644
+--- a/code/analysis/train.slurm
++++ b/code/analysis/train.slurm
+@@ -1,6 +1,6 @@
+ #!/bin/bash
+ #SBATCH -J load-ddfuser-grid
+-#SBATCH -o res/unfreeze_by_layer.txt
++#SBATCH -o res/balance_loss.txt
+ #SBATCH -c 32
+ #SBATCH --gres=gpu:V100:1
+ #SBATCH --exclude dell-gpu-23
+diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+index a47022a..ea24e74 100644
+--- a/code/diffuser/models/diffusion.py
++++ b/code/diffuser/models/diffusion.py
+@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         obs = x_noisy - x_recon
+         # decode obs to 409 dim
+         decoded_obs = decode_data(self.encode_model, obs)
+-        # assert decoded_obs.shape == (32, 100, 409)
++        assert decoded_obs.shape == (32, 100, 409)
+         x_t = obs[:, :-1, :]
+         x_t_1 = obs[:, 1:, :]
+         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         pred_a = self.inv_model(x_comb_t)
+ 
+         # get pred_a by inv_model from generated x_t and x_t_1
+-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+ 
+         return loss, info, balance_loss
+ 
+diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+index 351f9d2..187050e 100644
+--- a/code/diffuser/utils/training.py
++++ b/code/diffuser/utils/training.py
+@@ -114,6 +114,9 @@ class Trainer(object):
+         for step in range(n_train_steps):
+             for i in range(self.gradient_accumulate_every):
+                 batch = next(self.dataloader)
++                traj, cond, ret = batch
++                print(traj.shape)
++                continue
+                 batch = batch_to_device(batch, device=self.device)
+                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+                 loss = loss / self.gradient_accumulate_every
\ No newline at end of file
diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
index 516ab7e..81cd533 100644
--- a/code/analysis/train.slurm
+++ b/code/analysis/train.slurm
@@ -1,6 +1,6 @@
 #!/bin/bash
 #SBATCH -J load-ddfuser-grid
-#SBATCH -o res/unfreeze_by_layer.txt
+#SBATCH -o res/balance_loss.txt
 #SBATCH -c 32
 #SBATCH --gres=gpu:V100:1
 #SBATCH --exclude dell-gpu-23
diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
index a47022a..ea24e74 100644
--- a/code/diffuser/models/diffusion.py
+++ b/code/diffuser/models/diffusion.py
@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
         obs = x_noisy - x_recon
         # decode obs to 409 dim
         decoded_obs = decode_data(self.encode_model, obs)
-        # assert decoded_obs.shape == (32, 100, 409)
+        assert decoded_obs.shape == (32, 100, 409)
         x_t = obs[:, :-1, :]
         x_t_1 = obs[:, 1:, :]
         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
         pred_a = self.inv_model(x_comb_t)
 
         # get pred_a by inv_model from generated x_t and x_t_1
-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
 
         return loss, info, balance_loss
 
diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
index 351f9d2..7910030 100644
--- a/code/diffuser/utils/training.py
+++ b/code/diffuser/utils/training.py
@@ -114,11 +114,15 @@ class Trainer(object):
         for step in range(n_train_steps):
             for i in range(self.gradient_accumulate_every):
                 batch = next(self.dataloader)
+                traj, cond, ret = batch
+                print(traj.shape)
+                continue
                 batch = batch_to_device(batch, device=self.device)
                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
                 loss = loss / self.gradient_accumulate_every
                 loss.backward()
 
+            continue
             self.optimizer.step()
             self.optimizer.zero_grad()diff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
index 3b470ca..ddbb48f 100644
--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
@@ -22,4 +22,602 @@ index d62dc31..a47022a 100644
 +            pass
  
          if self.train_only_inv:
-             # Calculating inv loss
\ No newline at end of file
+             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+index 516ab7e..81cd533 100644
+--- a/code/analysis/train.slurm
++++ b/code/analysis/train.slurm
+@@ -1,6 +1,6 @@
+ #!/bin/bash
+ #SBATCH -J load-ddfuser-grid
+-#SBATCH -o res/unfreeze_by_layer.txt
++#SBATCH -o res/balance_loss.txt
+ #SBATCH -c 32
+ #SBATCH --gres=gpu:V100:1
+ #SBATCH --exclude dell-gpu-23
+diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+index a47022a..49375bc 100644
+--- a/code/diffuser/models/diffusion.py
++++ b/code/diffuser/models/diffusion.py
+@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         pred_a = self.inv_model(x_comb_t)
+ 
+         # get pred_a by inv_model from generated x_t and x_t_1
+-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+ 
+         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+index 3b470ca..410268d 100644
+--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
+ +            pass
+  
+          if self.train_only_inv:
+-             # Calculating inv loss
+\ No newline at end of file
++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..49375bc 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
+\ No newline at end of file
+diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+index 516ab7e..81cd533 100644
+--- a/code/analysis/train.slurm
++++ b/code/analysis/train.slurm
+@@ -1,6 +1,6 @@
+ #!/bin/bash
+ #SBATCH -J load-ddfuser-grid
+-#SBATCH -o res/unfreeze_by_layer.txt
++#SBATCH -o res/balance_loss.txt
+ #SBATCH -c 32
+ #SBATCH --gres=gpu:V100:1
+ #SBATCH --exclude dell-gpu-23
+diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+index a47022a..ea24e74 100644
+--- a/code/diffuser/models/diffusion.py
++++ b/code/diffuser/models/diffusion.py
+@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         obs = x_noisy - x_recon
+         # decode obs to 409 dim
+         decoded_obs = decode_data(self.encode_model, obs)
+-        # assert decoded_obs.shape == (32, 100, 409)
++        assert decoded_obs.shape == (32, 100, 409)
+         x_t = obs[:, :-1, :]
+         x_t_1 = obs[:, 1:, :]
+         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         pred_a = self.inv_model(x_comb_t)
+ 
+         # get pred_a by inv_model from generated x_t and x_t_1
+-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+ 
+         return loss, info, balance_loss
+ 
+diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+index 351f9d2..6721527 100644
+--- a/code/diffuser/utils/training.py
++++ b/code/diffuser/utils/training.py
+@@ -114,6 +114,8 @@ class Trainer(object):
+         for step in range(n_train_steps):
+             for i in range(self.gradient_accumulate_every):
+                 batch = next(self.dataloader)
++                print(batch.shape)
++                continue
+                 batch = batch_to_device(batch, device=self.device)
+                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+                 loss = loss / self.gradient_accumulate_everydiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+index 3b470ca..5b2bb45 100644
+--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+@@ -22,4 +22,108 @@ index d62dc31..a47022a 100644
+ +            pass
+  
+          if self.train_only_inv:
+-             # Calculating inv loss
+\ No newline at end of file
++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..49375bc 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++index 3b470ca..410268d 100644
++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
++ +            pass
++  
++          if self.train_only_inv:
++-             # Calculating inv loss
++\ No newline at end of file
+++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..49375bc 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
++\ No newline at end of file
++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..ea24e74 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         obs = x_noisy - x_recon
++         # decode obs to 409 dim
++         decoded_obs = decode_data(self.encode_model, obs)
++-        # assert decoded_obs.shape == (32, 100, 409)
+++        assert decoded_obs.shape == (32, 100, 409)
++         x_t = obs[:, :-1, :]
++         x_t_1 = obs[:, 1:, :]
++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
++ 
++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++index 351f9d2..6721527 100644
++--- a/code/diffuser/utils/training.py
+++++ b/code/diffuser/utils/training.py
++@@ -114,6 +114,8 @@ class Trainer(object):
++         for step in range(n_train_steps):
++             for i in range(self.gradient_accumulate_every):
++                 batch = next(self.dataloader)
+++                print(batch.shape)
+++                continue
++                 batch = batch_to_device(batch, device=self.device)
++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++                 loss = loss / self.gradient_accumulate_every
+\ No newline at end of file
+diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+index 516ab7e..81cd533 100644
+--- a/code/analysis/train.slurm
++++ b/code/analysis/train.slurm
+@@ -1,6 +1,6 @@
+ #!/bin/bash
+ #SBATCH -J load-ddfuser-grid
+-#SBATCH -o res/unfreeze_by_layer.txt
++#SBATCH -o res/balance_loss.txt
+ #SBATCH -c 32
+ #SBATCH --gres=gpu:V100:1
+ #SBATCH --exclude dell-gpu-23
+diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+index a47022a..ea24e74 100644
+--- a/code/diffuser/models/diffusion.py
++++ b/code/diffuser/models/diffusion.py
+@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         obs = x_noisy - x_recon
+         # decode obs to 409 dim
+         decoded_obs = decode_data(self.encode_model, obs)
+-        # assert decoded_obs.shape == (32, 100, 409)
++        assert decoded_obs.shape == (32, 100, 409)
+         x_t = obs[:, :-1, :]
+         x_t_1 = obs[:, 1:, :]
+         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         pred_a = self.inv_model(x_comb_t)
+ 
+         # get pred_a by inv_model from generated x_t and x_t_1
+-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+ 
+         return loss, info, balance_loss
+ 
+diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+index 351f9d2..187050e 100644
+--- a/code/diffuser/utils/training.py
++++ b/code/diffuser/utils/training.py
+@@ -114,6 +114,9 @@ class Trainer(object):
+         for step in range(n_train_steps):
+             for i in range(self.gradient_accumulate_every):
+                 batch = next(self.dataloader)
++                traj, cond, ret = batch
++                print(traj.shape)
++                continue
+                 batch = batch_to_device(batch, device=self.device)
+                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+                 loss = loss / self.gradient_accumulate_everydiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+index 3b470ca..2dd66ba 100644
+--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+@@ -22,4 +22,271 @@ index d62dc31..a47022a 100644
+ +            pass
+  
+          if self.train_only_inv:
+-             # Calculating inv loss
+\ No newline at end of file
++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..49375bc 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++index 3b470ca..410268d 100644
++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
++ +            pass
++  
++          if self.train_only_inv:
++-             # Calculating inv loss
++\ No newline at end of file
+++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..49375bc 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
++\ No newline at end of file
++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..ea24e74 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         obs = x_noisy - x_recon
++         # decode obs to 409 dim
++         decoded_obs = decode_data(self.encode_model, obs)
++-        # assert decoded_obs.shape == (32, 100, 409)
+++        assert decoded_obs.shape == (32, 100, 409)
++         x_t = obs[:, :-1, :]
++         x_t_1 = obs[:, 1:, :]
++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
++ 
++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++index 351f9d2..6721527 100644
++--- a/code/diffuser/utils/training.py
+++++ b/code/diffuser/utils/training.py
++@@ -114,6 +114,8 @@ class Trainer(object):
++         for step in range(n_train_steps):
++             for i in range(self.gradient_accumulate_every):
++                 batch = next(self.dataloader)
+++                print(batch.shape)
+++                continue
++                 batch = batch_to_device(batch, device=self.device)
++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++                 loss = loss / self.gradient_accumulate_everydiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++index 3b470ca..5b2bb45 100644
++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++@@ -22,4 +22,108 @@ index d62dc31..a47022a 100644
++ +            pass
++  
++          if self.train_only_inv:
++-             # Calculating inv loss
++\ No newline at end of file
+++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..49375bc 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++index 3b470ca..410268d 100644
+++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
+++ +            pass
+++  
+++          if self.train_only_inv:
+++-             # Calculating inv loss
+++\ No newline at end of file
++++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++++index 516ab7e..81cd533 100644
++++--- a/code/analysis/train.slurm
+++++++ b/code/analysis/train.slurm
++++@@ -1,6 +1,6 @@
++++ #!/bin/bash
++++ #SBATCH -J load-ddfuser-grid
++++-#SBATCH -o res/unfreeze_by_layer.txt
+++++#SBATCH -o res/balance_loss.txt
++++ #SBATCH -c 32
++++ #SBATCH --gres=gpu:V100:1
++++ #SBATCH --exclude dell-gpu-23
++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++++index a47022a..49375bc 100644
++++--- a/code/diffuser/models/diffusion.py
+++++++ b/code/diffuser/models/diffusion.py
++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         pred_a = self.inv_model(x_comb_t)
++++ 
++++         # get pred_a by inv_model from generated x_t and x_t_1
++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++++ 
++++         return loss, info, balance_loss
+++\ No newline at end of file
+++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..ea24e74 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         obs = x_noisy - x_recon
+++         # decode obs to 409 dim
+++         decoded_obs = decode_data(self.encode_model, obs)
+++-        # assert decoded_obs.shape == (32, 100, 409)
++++        assert decoded_obs.shape == (32, 100, 409)
+++         x_t = obs[:, :-1, :]
+++         x_t_1 = obs[:, 1:, :]
+++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
+++ 
+++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+++index 351f9d2..6721527 100644
+++--- a/code/diffuser/utils/training.py
++++++ b/code/diffuser/utils/training.py
+++@@ -114,6 +114,8 @@ class Trainer(object):
+++         for step in range(n_train_steps):
+++             for i in range(self.gradient_accumulate_every):
+++                 batch = next(self.dataloader)
++++                print(batch.shape)
++++                continue
+++                 batch = batch_to_device(batch, device=self.device)
+++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+++                 loss = loss / self.gradient_accumulate_every
++\ No newline at end of file
++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..ea24e74 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         obs = x_noisy - x_recon
++         # decode obs to 409 dim
++         decoded_obs = decode_data(self.encode_model, obs)
++-        # assert decoded_obs.shape == (32, 100, 409)
+++        assert decoded_obs.shape == (32, 100, 409)
++         x_t = obs[:, :-1, :]
++         x_t_1 = obs[:, 1:, :]
++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
++ 
++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++index 351f9d2..187050e 100644
++--- a/code/diffuser/utils/training.py
+++++ b/code/diffuser/utils/training.py
++@@ -114,6 +114,9 @@ class Trainer(object):
++         for step in range(n_train_steps):
++             for i in range(self.gradient_accumulate_every):
++                 batch = next(self.dataloader)
+++                traj, cond, ret = batch
+++                print(traj.shape)
+++                continue
++                 batch = batch_to_device(batch, device=self.device)
++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++                 loss = loss / self.gradient_accumulate_every
+\ No newline at end of file
+diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+index 516ab7e..81cd533 100644
+--- a/code/analysis/train.slurm
++++ b/code/analysis/train.slurm
+@@ -1,6 +1,6 @@
+ #!/bin/bash
+ #SBATCH -J load-ddfuser-grid
+-#SBATCH -o res/unfreeze_by_layer.txt
++#SBATCH -o res/balance_loss.txt
+ #SBATCH -c 32
+ #SBATCH --gres=gpu:V100:1
+ #SBATCH --exclude dell-gpu-23
+diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+index a47022a..ea24e74 100644
+--- a/code/diffuser/models/diffusion.py
++++ b/code/diffuser/models/diffusion.py
+@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         obs = x_noisy - x_recon
+         # decode obs to 409 dim
+         decoded_obs = decode_data(self.encode_model, obs)
+-        # assert decoded_obs.shape == (32, 100, 409)
++        assert decoded_obs.shape == (32, 100, 409)
+         x_t = obs[:, :-1, :]
+         x_t_1 = obs[:, 1:, :]
+         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         pred_a = self.inv_model(x_comb_t)
+ 
+         # get pred_a by inv_model from generated x_t and x_t_1
+-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+ 
+         return loss, info, balance_loss
+ 
+diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+index 351f9d2..7910030 100644
+--- a/code/diffuser/utils/training.py
++++ b/code/diffuser/utils/training.py
+@@ -114,11 +114,15 @@ class Trainer(object):
+         for step in range(n_train_steps):
+             for i in range(self.gradient_accumulate_every):
+                 batch = next(self.dataloader)
++                traj, cond, ret = batch
++                print(traj.shape)
++                continue
+                 batch = batch_to_device(batch, device=self.device)
+                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+                 loss = loss / self.gradient_accumulate_every
+                 loss.backward()
+ 
++            continue
+             self.optimizer.step()
+             self.optimizer.zero_grad()
\ No newline at end of file
diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
index 516ab7e..81cd533 100644
--- a/code/analysis/train.slurm
+++ b/code/analysis/train.slurm
@@ -1,6 +1,6 @@
 #!/bin/bash
 #SBATCH -J load-ddfuser-grid
-#SBATCH -o res/unfreeze_by_layer.txt
+#SBATCH -o res/balance_loss.txt
 #SBATCH -c 32
 #SBATCH --gres=gpu:V100:1
 #SBATCH --exclude dell-gpu-23
diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
index a47022a..ea24e74 100644
--- a/code/diffuser/models/diffusion.py
+++ b/code/diffuser/models/diffusion.py
@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
         obs = x_noisy - x_recon
         # decode obs to 409 dim
         decoded_obs = decode_data(self.encode_model, obs)
-        # assert decoded_obs.shape == (32, 100, 409)
+        assert decoded_obs.shape == (32, 100, 409)
         x_t = obs[:, :-1, :]
         x_t_1 = obs[:, 1:, :]
         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
         pred_a = self.inv_model(x_comb_t)
 
         # get pred_a by inv_model from generated x_t and x_t_1
-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
 
         return loss, info, balance_loss
 
diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
index 351f9d2..6411878 100644
--- a/code/diffuser/utils/training.py
+++ b/code/diffuser/utils/training.py
@@ -114,11 +114,16 @@ class Trainer(object):
         for step in range(n_train_steps):
             for i in range(self.gradient_accumulate_every):
                 batch = next(self.dataloader)
+                traj, cond, ret = batch
+                print(traj.shape)
+                assert traj.shape[0] == 32
+                continue
                 batch = batch_to_device(batch, device=self.device)
                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
                 loss = loss / self.gradient_accumulate_every
                 loss.backward()
 
+            continue
             self.optimizer.step()
             self.optimizer.zero_grad()diff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
index 3b470ca..b64e2c6 100644
--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
@@ -22,4 +22,1265 @@ index d62dc31..a47022a 100644
 +            pass
  
          if self.train_only_inv:
-             # Calculating inv loss
\ No newline at end of file
+             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+index 516ab7e..81cd533 100644
+--- a/code/analysis/train.slurm
++++ b/code/analysis/train.slurm
+@@ -1,6 +1,6 @@
+ #!/bin/bash
+ #SBATCH -J load-ddfuser-grid
+-#SBATCH -o res/unfreeze_by_layer.txt
++#SBATCH -o res/balance_loss.txt
+ #SBATCH -c 32
+ #SBATCH --gres=gpu:V100:1
+ #SBATCH --exclude dell-gpu-23
+diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+index a47022a..49375bc 100644
+--- a/code/diffuser/models/diffusion.py
++++ b/code/diffuser/models/diffusion.py
+@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         pred_a = self.inv_model(x_comb_t)
+ 
+         # get pred_a by inv_model from generated x_t and x_t_1
+-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+ 
+         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+index 3b470ca..410268d 100644
+--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
+ +            pass
+  
+          if self.train_only_inv:
+-             # Calculating inv loss
+\ No newline at end of file
++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..49375bc 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
+\ No newline at end of file
+diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+index 516ab7e..81cd533 100644
+--- a/code/analysis/train.slurm
++++ b/code/analysis/train.slurm
+@@ -1,6 +1,6 @@
+ #!/bin/bash
+ #SBATCH -J load-ddfuser-grid
+-#SBATCH -o res/unfreeze_by_layer.txt
++#SBATCH -o res/balance_loss.txt
+ #SBATCH -c 32
+ #SBATCH --gres=gpu:V100:1
+ #SBATCH --exclude dell-gpu-23
+diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+index a47022a..ea24e74 100644
+--- a/code/diffuser/models/diffusion.py
++++ b/code/diffuser/models/diffusion.py
+@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         obs = x_noisy - x_recon
+         # decode obs to 409 dim
+         decoded_obs = decode_data(self.encode_model, obs)
+-        # assert decoded_obs.shape == (32, 100, 409)
++        assert decoded_obs.shape == (32, 100, 409)
+         x_t = obs[:, :-1, :]
+         x_t_1 = obs[:, 1:, :]
+         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         pred_a = self.inv_model(x_comb_t)
+ 
+         # get pred_a by inv_model from generated x_t and x_t_1
+-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+ 
+         return loss, info, balance_loss
+ 
+diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+index 351f9d2..6721527 100644
+--- a/code/diffuser/utils/training.py
++++ b/code/diffuser/utils/training.py
+@@ -114,6 +114,8 @@ class Trainer(object):
+         for step in range(n_train_steps):
+             for i in range(self.gradient_accumulate_every):
+                 batch = next(self.dataloader)
++                print(batch.shape)
++                continue
+                 batch = batch_to_device(batch, device=self.device)
+                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+                 loss = loss / self.gradient_accumulate_everydiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+index 3b470ca..5b2bb45 100644
+--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+@@ -22,4 +22,108 @@ index d62dc31..a47022a 100644
+ +            pass
+  
+          if self.train_only_inv:
+-             # Calculating inv loss
+\ No newline at end of file
++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..49375bc 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++index 3b470ca..410268d 100644
++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
++ +            pass
++  
++          if self.train_only_inv:
++-             # Calculating inv loss
++\ No newline at end of file
+++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..49375bc 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
++\ No newline at end of file
++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..ea24e74 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         obs = x_noisy - x_recon
++         # decode obs to 409 dim
++         decoded_obs = decode_data(self.encode_model, obs)
++-        # assert decoded_obs.shape == (32, 100, 409)
+++        assert decoded_obs.shape == (32, 100, 409)
++         x_t = obs[:, :-1, :]
++         x_t_1 = obs[:, 1:, :]
++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
++ 
++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++index 351f9d2..6721527 100644
++--- a/code/diffuser/utils/training.py
+++++ b/code/diffuser/utils/training.py
++@@ -114,6 +114,8 @@ class Trainer(object):
++         for step in range(n_train_steps):
++             for i in range(self.gradient_accumulate_every):
++                 batch = next(self.dataloader)
+++                print(batch.shape)
+++                continue
++                 batch = batch_to_device(batch, device=self.device)
++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++                 loss = loss / self.gradient_accumulate_every
+\ No newline at end of file
+diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+index 516ab7e..81cd533 100644
+--- a/code/analysis/train.slurm
++++ b/code/analysis/train.slurm
+@@ -1,6 +1,6 @@
+ #!/bin/bash
+ #SBATCH -J load-ddfuser-grid
+-#SBATCH -o res/unfreeze_by_layer.txt
++#SBATCH -o res/balance_loss.txt
+ #SBATCH -c 32
+ #SBATCH --gres=gpu:V100:1
+ #SBATCH --exclude dell-gpu-23
+diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+index a47022a..ea24e74 100644
+--- a/code/diffuser/models/diffusion.py
++++ b/code/diffuser/models/diffusion.py
+@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         obs = x_noisy - x_recon
+         # decode obs to 409 dim
+         decoded_obs = decode_data(self.encode_model, obs)
+-        # assert decoded_obs.shape == (32, 100, 409)
++        assert decoded_obs.shape == (32, 100, 409)
+         x_t = obs[:, :-1, :]
+         x_t_1 = obs[:, 1:, :]
+         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         pred_a = self.inv_model(x_comb_t)
+ 
+         # get pred_a by inv_model from generated x_t and x_t_1
+-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+ 
+         return loss, info, balance_loss
+ 
+diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+index 351f9d2..187050e 100644
+--- a/code/diffuser/utils/training.py
++++ b/code/diffuser/utils/training.py
+@@ -114,6 +114,9 @@ class Trainer(object):
+         for step in range(n_train_steps):
+             for i in range(self.gradient_accumulate_every):
+                 batch = next(self.dataloader)
++                traj, cond, ret = batch
++                print(traj.shape)
++                continue
+                 batch = batch_to_device(batch, device=self.device)
+                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+                 loss = loss / self.gradient_accumulate_everydiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+index 3b470ca..2dd66ba 100644
+--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+@@ -22,4 +22,271 @@ index d62dc31..a47022a 100644
+ +            pass
+  
+          if self.train_only_inv:
+-             # Calculating inv loss
+\ No newline at end of file
++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..49375bc 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++index 3b470ca..410268d 100644
++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
++ +            pass
++  
++          if self.train_only_inv:
++-             # Calculating inv loss
++\ No newline at end of file
+++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..49375bc 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
++\ No newline at end of file
++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..ea24e74 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         obs = x_noisy - x_recon
++         # decode obs to 409 dim
++         decoded_obs = decode_data(self.encode_model, obs)
++-        # assert decoded_obs.shape == (32, 100, 409)
+++        assert decoded_obs.shape == (32, 100, 409)
++         x_t = obs[:, :-1, :]
++         x_t_1 = obs[:, 1:, :]
++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
++ 
++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++index 351f9d2..6721527 100644
++--- a/code/diffuser/utils/training.py
+++++ b/code/diffuser/utils/training.py
++@@ -114,6 +114,8 @@ class Trainer(object):
++         for step in range(n_train_steps):
++             for i in range(self.gradient_accumulate_every):
++                 batch = next(self.dataloader)
+++                print(batch.shape)
+++                continue
++                 batch = batch_to_device(batch, device=self.device)
++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++                 loss = loss / self.gradient_accumulate_everydiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++index 3b470ca..5b2bb45 100644
++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++@@ -22,4 +22,108 @@ index d62dc31..a47022a 100644
++ +            pass
++  
++          if self.train_only_inv:
++-             # Calculating inv loss
++\ No newline at end of file
+++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..49375bc 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++index 3b470ca..410268d 100644
+++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
+++ +            pass
+++  
+++          if self.train_only_inv:
+++-             # Calculating inv loss
+++\ No newline at end of file
++++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++++index 516ab7e..81cd533 100644
++++--- a/code/analysis/train.slurm
+++++++ b/code/analysis/train.slurm
++++@@ -1,6 +1,6 @@
++++ #!/bin/bash
++++ #SBATCH -J load-ddfuser-grid
++++-#SBATCH -o res/unfreeze_by_layer.txt
+++++#SBATCH -o res/balance_loss.txt
++++ #SBATCH -c 32
++++ #SBATCH --gres=gpu:V100:1
++++ #SBATCH --exclude dell-gpu-23
++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++++index a47022a..49375bc 100644
++++--- a/code/diffuser/models/diffusion.py
+++++++ b/code/diffuser/models/diffusion.py
++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         pred_a = self.inv_model(x_comb_t)
++++ 
++++         # get pred_a by inv_model from generated x_t and x_t_1
++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++++ 
++++         return loss, info, balance_loss
+++\ No newline at end of file
+++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..ea24e74 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         obs = x_noisy - x_recon
+++         # decode obs to 409 dim
+++         decoded_obs = decode_data(self.encode_model, obs)
+++-        # assert decoded_obs.shape == (32, 100, 409)
++++        assert decoded_obs.shape == (32, 100, 409)
+++         x_t = obs[:, :-1, :]
+++         x_t_1 = obs[:, 1:, :]
+++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
+++ 
+++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+++index 351f9d2..6721527 100644
+++--- a/code/diffuser/utils/training.py
++++++ b/code/diffuser/utils/training.py
+++@@ -114,6 +114,8 @@ class Trainer(object):
+++         for step in range(n_train_steps):
+++             for i in range(self.gradient_accumulate_every):
+++                 batch = next(self.dataloader)
++++                print(batch.shape)
++++                continue
+++                 batch = batch_to_device(batch, device=self.device)
+++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+++                 loss = loss / self.gradient_accumulate_every
++\ No newline at end of file
++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..ea24e74 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         obs = x_noisy - x_recon
++         # decode obs to 409 dim
++         decoded_obs = decode_data(self.encode_model, obs)
++-        # assert decoded_obs.shape == (32, 100, 409)
+++        assert decoded_obs.shape == (32, 100, 409)
++         x_t = obs[:, :-1, :]
++         x_t_1 = obs[:, 1:, :]
++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
++ 
++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++index 351f9d2..187050e 100644
++--- a/code/diffuser/utils/training.py
+++++ b/code/diffuser/utils/training.py
++@@ -114,6 +114,9 @@ class Trainer(object):
++         for step in range(n_train_steps):
++             for i in range(self.gradient_accumulate_every):
++                 batch = next(self.dataloader)
+++                traj, cond, ret = batch
+++                print(traj.shape)
+++                continue
++                 batch = batch_to_device(batch, device=self.device)
++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++                 loss = loss / self.gradient_accumulate_every
+\ No newline at end of file
+diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+index 516ab7e..81cd533 100644
+--- a/code/analysis/train.slurm
++++ b/code/analysis/train.slurm
+@@ -1,6 +1,6 @@
+ #!/bin/bash
+ #SBATCH -J load-ddfuser-grid
+-#SBATCH -o res/unfreeze_by_layer.txt
++#SBATCH -o res/balance_loss.txt
+ #SBATCH -c 32
+ #SBATCH --gres=gpu:V100:1
+ #SBATCH --exclude dell-gpu-23
+diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+index a47022a..ea24e74 100644
+--- a/code/diffuser/models/diffusion.py
++++ b/code/diffuser/models/diffusion.py
+@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         obs = x_noisy - x_recon
+         # decode obs to 409 dim
+         decoded_obs = decode_data(self.encode_model, obs)
+-        # assert decoded_obs.shape == (32, 100, 409)
++        assert decoded_obs.shape == (32, 100, 409)
+         x_t = obs[:, :-1, :]
+         x_t_1 = obs[:, 1:, :]
+         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         pred_a = self.inv_model(x_comb_t)
+ 
+         # get pred_a by inv_model from generated x_t and x_t_1
+-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+ 
+         return loss, info, balance_loss
+ 
+diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+index 351f9d2..7910030 100644
+--- a/code/diffuser/utils/training.py
++++ b/code/diffuser/utils/training.py
+@@ -114,11 +114,15 @@ class Trainer(object):
+         for step in range(n_train_steps):
+             for i in range(self.gradient_accumulate_every):
+                 batch = next(self.dataloader)
++                traj, cond, ret = batch
++                print(traj.shape)
++                continue
+                 batch = batch_to_device(batch, device=self.device)
+                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+                 loss = loss / self.gradient_accumulate_every
+                 loss.backward()
+ 
++            continue
+             self.optimizer.step()
+             self.optimizer.zero_grad()diff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+index 3b470ca..ddbb48f 100644
+--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+@@ -22,4 +22,602 @@ index d62dc31..a47022a 100644
+ +            pass
+  
+          if self.train_only_inv:
+-             # Calculating inv loss
+\ No newline at end of file
++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..49375bc 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++index 3b470ca..410268d 100644
++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
++ +            pass
++  
++          if self.train_only_inv:
++-             # Calculating inv loss
++\ No newline at end of file
+++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..49375bc 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
++\ No newline at end of file
++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..ea24e74 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         obs = x_noisy - x_recon
++         # decode obs to 409 dim
++         decoded_obs = decode_data(self.encode_model, obs)
++-        # assert decoded_obs.shape == (32, 100, 409)
+++        assert decoded_obs.shape == (32, 100, 409)
++         x_t = obs[:, :-1, :]
++         x_t_1 = obs[:, 1:, :]
++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
++ 
++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++index 351f9d2..6721527 100644
++--- a/code/diffuser/utils/training.py
+++++ b/code/diffuser/utils/training.py
++@@ -114,6 +114,8 @@ class Trainer(object):
++         for step in range(n_train_steps):
++             for i in range(self.gradient_accumulate_every):
++                 batch = next(self.dataloader)
+++                print(batch.shape)
+++                continue
++                 batch = batch_to_device(batch, device=self.device)
++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++                 loss = loss / self.gradient_accumulate_everydiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++index 3b470ca..5b2bb45 100644
++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++@@ -22,4 +22,108 @@ index d62dc31..a47022a 100644
++ +            pass
++  
++          if self.train_only_inv:
++-             # Calculating inv loss
++\ No newline at end of file
+++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..49375bc 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++index 3b470ca..410268d 100644
+++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
+++ +            pass
+++  
+++          if self.train_only_inv:
+++-             # Calculating inv loss
+++\ No newline at end of file
++++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++++index 516ab7e..81cd533 100644
++++--- a/code/analysis/train.slurm
+++++++ b/code/analysis/train.slurm
++++@@ -1,6 +1,6 @@
++++ #!/bin/bash
++++ #SBATCH -J load-ddfuser-grid
++++-#SBATCH -o res/unfreeze_by_layer.txt
+++++#SBATCH -o res/balance_loss.txt
++++ #SBATCH -c 32
++++ #SBATCH --gres=gpu:V100:1
++++ #SBATCH --exclude dell-gpu-23
++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++++index a47022a..49375bc 100644
++++--- a/code/diffuser/models/diffusion.py
+++++++ b/code/diffuser/models/diffusion.py
++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         pred_a = self.inv_model(x_comb_t)
++++ 
++++         # get pred_a by inv_model from generated x_t and x_t_1
++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++++ 
++++         return loss, info, balance_loss
+++\ No newline at end of file
+++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..ea24e74 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         obs = x_noisy - x_recon
+++         # decode obs to 409 dim
+++         decoded_obs = decode_data(self.encode_model, obs)
+++-        # assert decoded_obs.shape == (32, 100, 409)
++++        assert decoded_obs.shape == (32, 100, 409)
+++         x_t = obs[:, :-1, :]
+++         x_t_1 = obs[:, 1:, :]
+++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
+++ 
+++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+++index 351f9d2..6721527 100644
+++--- a/code/diffuser/utils/training.py
++++++ b/code/diffuser/utils/training.py
+++@@ -114,6 +114,8 @@ class Trainer(object):
+++         for step in range(n_train_steps):
+++             for i in range(self.gradient_accumulate_every):
+++                 batch = next(self.dataloader)
++++                print(batch.shape)
++++                continue
+++                 batch = batch_to_device(batch, device=self.device)
+++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+++                 loss = loss / self.gradient_accumulate_every
++\ No newline at end of file
++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..ea24e74 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         obs = x_noisy - x_recon
++         # decode obs to 409 dim
++         decoded_obs = decode_data(self.encode_model, obs)
++-        # assert decoded_obs.shape == (32, 100, 409)
+++        assert decoded_obs.shape == (32, 100, 409)
++         x_t = obs[:, :-1, :]
++         x_t_1 = obs[:, 1:, :]
++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
++ 
++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++index 351f9d2..187050e 100644
++--- a/code/diffuser/utils/training.py
+++++ b/code/diffuser/utils/training.py
++@@ -114,6 +114,9 @@ class Trainer(object):
++         for step in range(n_train_steps):
++             for i in range(self.gradient_accumulate_every):
++                 batch = next(self.dataloader)
+++                traj, cond, ret = batch
+++                print(traj.shape)
+++                continue
++                 batch = batch_to_device(batch, device=self.device)
++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++                 loss = loss / self.gradient_accumulate_everydiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++index 3b470ca..2dd66ba 100644
++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++@@ -22,4 +22,271 @@ index d62dc31..a47022a 100644
++ +            pass
++  
++          if self.train_only_inv:
++-             # Calculating inv loss
++\ No newline at end of file
+++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..49375bc 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++index 3b470ca..410268d 100644
+++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
+++ +            pass
+++  
+++          if self.train_only_inv:
+++-             # Calculating inv loss
+++\ No newline at end of file
++++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++++index 516ab7e..81cd533 100644
++++--- a/code/analysis/train.slurm
+++++++ b/code/analysis/train.slurm
++++@@ -1,6 +1,6 @@
++++ #!/bin/bash
++++ #SBATCH -J load-ddfuser-grid
++++-#SBATCH -o res/unfreeze_by_layer.txt
+++++#SBATCH -o res/balance_loss.txt
++++ #SBATCH -c 32
++++ #SBATCH --gres=gpu:V100:1
++++ #SBATCH --exclude dell-gpu-23
++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++++index a47022a..49375bc 100644
++++--- a/code/diffuser/models/diffusion.py
+++++++ b/code/diffuser/models/diffusion.py
++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         pred_a = self.inv_model(x_comb_t)
++++ 
++++         # get pred_a by inv_model from generated x_t and x_t_1
++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++++ 
++++         return loss, info, balance_loss
+++\ No newline at end of file
+++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..ea24e74 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         obs = x_noisy - x_recon
+++         # decode obs to 409 dim
+++         decoded_obs = decode_data(self.encode_model, obs)
+++-        # assert decoded_obs.shape == (32, 100, 409)
++++        assert decoded_obs.shape == (32, 100, 409)
+++         x_t = obs[:, :-1, :]
+++         x_t_1 = obs[:, 1:, :]
+++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
+++ 
+++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+++index 351f9d2..6721527 100644
+++--- a/code/diffuser/utils/training.py
++++++ b/code/diffuser/utils/training.py
+++@@ -114,6 +114,8 @@ class Trainer(object):
+++         for step in range(n_train_steps):
+++             for i in range(self.gradient_accumulate_every):
+++                 batch = next(self.dataloader)
++++                print(batch.shape)
++++                continue
+++                 batch = batch_to_device(batch, device=self.device)
+++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+++                 loss = loss / self.gradient_accumulate_everydiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++index 3b470ca..5b2bb45 100644
+++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++@@ -22,4 +22,108 @@ index d62dc31..a47022a 100644
+++ +            pass
+++  
+++          if self.train_only_inv:
+++-             # Calculating inv loss
+++\ No newline at end of file
++++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++++index 516ab7e..81cd533 100644
++++--- a/code/analysis/train.slurm
+++++++ b/code/analysis/train.slurm
++++@@ -1,6 +1,6 @@
++++ #!/bin/bash
++++ #SBATCH -J load-ddfuser-grid
++++-#SBATCH -o res/unfreeze_by_layer.txt
+++++#SBATCH -o res/balance_loss.txt
++++ #SBATCH -c 32
++++ #SBATCH --gres=gpu:V100:1
++++ #SBATCH --exclude dell-gpu-23
++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++++index a47022a..49375bc 100644
++++--- a/code/diffuser/models/diffusion.py
+++++++ b/code/diffuser/models/diffusion.py
++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         pred_a = self.inv_model(x_comb_t)
++++ 
++++         # get pred_a by inv_model from generated x_t and x_t_1
++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++++ 
++++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++index 3b470ca..410268d 100644
++++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
++++ +            pass
++++  
++++          if self.train_only_inv:
++++-             # Calculating inv loss
++++\ No newline at end of file
+++++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++++index 516ab7e..81cd533 100644
+++++--- a/code/analysis/train.slurm
++++++++ b/code/analysis/train.slurm
+++++@@ -1,6 +1,6 @@
+++++ #!/bin/bash
+++++ #SBATCH -J load-ddfuser-grid
+++++-#SBATCH -o res/unfreeze_by_layer.txt
++++++#SBATCH -o res/balance_loss.txt
+++++ #SBATCH -c 32
+++++ #SBATCH --gres=gpu:V100:1
+++++ #SBATCH --exclude dell-gpu-23
+++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++++index a47022a..49375bc 100644
+++++--- a/code/diffuser/models/diffusion.py
++++++++ b/code/diffuser/models/diffusion.py
+++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++++         pred_a = self.inv_model(x_comb_t)
+++++ 
+++++         # get pred_a by inv_model from generated x_t and x_t_1
+++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++++ 
+++++         return loss, info, balance_loss
++++\ No newline at end of file
++++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++++index 516ab7e..81cd533 100644
++++--- a/code/analysis/train.slurm
+++++++ b/code/analysis/train.slurm
++++@@ -1,6 +1,6 @@
++++ #!/bin/bash
++++ #SBATCH -J load-ddfuser-grid
++++-#SBATCH -o res/unfreeze_by_layer.txt
+++++#SBATCH -o res/balance_loss.txt
++++ #SBATCH -c 32
++++ #SBATCH --gres=gpu:V100:1
++++ #SBATCH --exclude dell-gpu-23
++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++++index a47022a..ea24e74 100644
++++--- a/code/diffuser/models/diffusion.py
+++++++ b/code/diffuser/models/diffusion.py
++++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         obs = x_noisy - x_recon
++++         # decode obs to 409 dim
++++         decoded_obs = decode_data(self.encode_model, obs)
++++-        # assert decoded_obs.shape == (32, 100, 409)
+++++        assert decoded_obs.shape == (32, 100, 409)
++++         x_t = obs[:, :-1, :]
++++         x_t_1 = obs[:, 1:, :]
++++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         pred_a = self.inv_model(x_comb_t)
++++ 
++++         # get pred_a by inv_model from generated x_t and x_t_1
++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++++ 
++++         return loss, info, balance_loss
++++ 
++++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++++index 351f9d2..6721527 100644
++++--- a/code/diffuser/utils/training.py
+++++++ b/code/diffuser/utils/training.py
++++@@ -114,6 +114,8 @@ class Trainer(object):
++++         for step in range(n_train_steps):
++++             for i in range(self.gradient_accumulate_every):
++++                 batch = next(self.dataloader)
+++++                print(batch.shape)
+++++                continue
++++                 batch = batch_to_device(batch, device=self.device)
++++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++++                 loss = loss / self.gradient_accumulate_every
+++\ No newline at end of file
+++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..ea24e74 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         obs = x_noisy - x_recon
+++         # decode obs to 409 dim
+++         decoded_obs = decode_data(self.encode_model, obs)
+++-        # assert decoded_obs.shape == (32, 100, 409)
++++        assert decoded_obs.shape == (32, 100, 409)
+++         x_t = obs[:, :-1, :]
+++         x_t_1 = obs[:, 1:, :]
+++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
+++ 
+++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+++index 351f9d2..187050e 100644
+++--- a/code/diffuser/utils/training.py
++++++ b/code/diffuser/utils/training.py
+++@@ -114,6 +114,9 @@ class Trainer(object):
+++         for step in range(n_train_steps):
+++             for i in range(self.gradient_accumulate_every):
+++                 batch = next(self.dataloader)
++++                traj, cond, ret = batch
++++                print(traj.shape)
++++                continue
+++                 batch = batch_to_device(batch, device=self.device)
+++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+++                 loss = loss / self.gradient_accumulate_every
++\ No newline at end of file
++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..ea24e74 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         obs = x_noisy - x_recon
++         # decode obs to 409 dim
++         decoded_obs = decode_data(self.encode_model, obs)
++-        # assert decoded_obs.shape == (32, 100, 409)
+++        assert decoded_obs.shape == (32, 100, 409)
++         x_t = obs[:, :-1, :]
++         x_t_1 = obs[:, 1:, :]
++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
++ 
++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++index 351f9d2..7910030 100644
++--- a/code/diffuser/utils/training.py
+++++ b/code/diffuser/utils/training.py
++@@ -114,11 +114,15 @@ class Trainer(object):
++         for step in range(n_train_steps):
++             for i in range(self.gradient_accumulate_every):
++                 batch = next(self.dataloader)
+++                traj, cond, ret = batch
+++                print(traj.shape)
+++                continue
++                 batch = batch_to_device(batch, device=self.device)
++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++                 loss = loss / self.gradient_accumulate_every
++                 loss.backward()
++ 
+++            continue
++             self.optimizer.step()
++             self.optimizer.zero_grad()
+\ No newline at end of file
+diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+index 516ab7e..81cd533 100644
+--- a/code/analysis/train.slurm
++++ b/code/analysis/train.slurm
+@@ -1,6 +1,6 @@
+ #!/bin/bash
+ #SBATCH -J load-ddfuser-grid
+-#SBATCH -o res/unfreeze_by_layer.txt
++#SBATCH -o res/balance_loss.txt
+ #SBATCH -c 32
+ #SBATCH --gres=gpu:V100:1
+ #SBATCH --exclude dell-gpu-23
+diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+index a47022a..ea24e74 100644
+--- a/code/diffuser/models/diffusion.py
++++ b/code/diffuser/models/diffusion.py
+@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         obs = x_noisy - x_recon
+         # decode obs to 409 dim
+         decoded_obs = decode_data(self.encode_model, obs)
+-        # assert decoded_obs.shape == (32, 100, 409)
++        assert decoded_obs.shape == (32, 100, 409)
+         x_t = obs[:, :-1, :]
+         x_t_1 = obs[:, 1:, :]
+         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         pred_a = self.inv_model(x_comb_t)
+ 
+         # get pred_a by inv_model from generated x_t and x_t_1
+-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+ 
+         return loss, info, balance_loss
+ 
+diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+index 351f9d2..6411878 100644
+--- a/code/diffuser/utils/training.py
++++ b/code/diffuser/utils/training.py
+@@ -114,11 +114,16 @@ class Trainer(object):
+         for step in range(n_train_steps):
+             for i in range(self.gradient_accumulate_every):
+                 batch = next(self.dataloader)
++                traj, cond, ret = batch
++                print(traj.shape)
++                assert traj.shape[0] == 32
++                continue
+                 batch = batch_to_device(batch, device=self.device)
+                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+                 loss = loss / self.gradient_accumulate_every
+                 loss.backward()
+ 
++            continue
+             self.optimizer.step()
+             self.optimizer.zero_grad()
\ No newline at end of file
diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
index 516ab7e..81cd533 100644
--- a/code/analysis/train.slurm
+++ b/code/analysis/train.slurm
@@ -1,6 +1,6 @@
 #!/bin/bash
 #SBATCH -J load-ddfuser-grid
-#SBATCH -o res/unfreeze_by_layer.txt
+#SBATCH -o res/balance_loss.txt
 #SBATCH -c 32
 #SBATCH --gres=gpu:V100:1
 #SBATCH --exclude dell-gpu-23
diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
index a47022a..ea24e74 100644
--- a/code/diffuser/models/diffusion.py
+++ b/code/diffuser/models/diffusion.py
@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
         obs = x_noisy - x_recon
         # decode obs to 409 dim
         decoded_obs = decode_data(self.encode_model, obs)
-        # assert decoded_obs.shape == (32, 100, 409)
+        assert decoded_obs.shape == (32, 100, 409)
         x_t = obs[:, :-1, :]
         x_t_1 = obs[:, 1:, :]
         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
         pred_a = self.inv_model(x_comb_t)
 
         # get pred_a by inv_model from generated x_t and x_t_1
-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
 
         return loss, info, balance_loss
 
diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
index 351f9d2..e08eb07 100644
--- a/code/diffuser/utils/training.py
+++ b/code/diffuser/utils/training.py
@@ -114,11 +114,16 @@ class Trainer(object):
         for step in range(n_train_steps):
             for i in range(self.gradient_accumulate_every):
                 batch = next(self.dataloader)
+                traj, cond, ret = batch
+                print(f"i: {i}, step: {step}, shape0: {traj.shape[0]}")
+                assert traj.shape[0] == 32
+                continue
                 batch = batch_to_device(batch, device=self.device)
                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
                 loss = loss / self.gradient_accumulate_every
                 loss.backward()
 
+            continue
             self.optimizer.step()
             self.optimizer.zero_grad()diff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
index 3b470ca..5fe655f 100644
--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
@@ -22,4 +22,2591 @@ index d62dc31..a47022a 100644
 +            pass
  
          if self.train_only_inv:
-             # Calculating inv loss
\ No newline at end of file
+             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+index 516ab7e..81cd533 100644
+--- a/code/analysis/train.slurm
++++ b/code/analysis/train.slurm
+@@ -1,6 +1,6 @@
+ #!/bin/bash
+ #SBATCH -J load-ddfuser-grid
+-#SBATCH -o res/unfreeze_by_layer.txt
++#SBATCH -o res/balance_loss.txt
+ #SBATCH -c 32
+ #SBATCH --gres=gpu:V100:1
+ #SBATCH --exclude dell-gpu-23
+diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+index a47022a..49375bc 100644
+--- a/code/diffuser/models/diffusion.py
++++ b/code/diffuser/models/diffusion.py
+@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         pred_a = self.inv_model(x_comb_t)
+ 
+         # get pred_a by inv_model from generated x_t and x_t_1
+-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+ 
+         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+index 3b470ca..410268d 100644
+--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
+ +            pass
+  
+          if self.train_only_inv:
+-             # Calculating inv loss
+\ No newline at end of file
++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..49375bc 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
+\ No newline at end of file
+diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+index 516ab7e..81cd533 100644
+--- a/code/analysis/train.slurm
++++ b/code/analysis/train.slurm
+@@ -1,6 +1,6 @@
+ #!/bin/bash
+ #SBATCH -J load-ddfuser-grid
+-#SBATCH -o res/unfreeze_by_layer.txt
++#SBATCH -o res/balance_loss.txt
+ #SBATCH -c 32
+ #SBATCH --gres=gpu:V100:1
+ #SBATCH --exclude dell-gpu-23
+diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+index a47022a..ea24e74 100644
+--- a/code/diffuser/models/diffusion.py
++++ b/code/diffuser/models/diffusion.py
+@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         obs = x_noisy - x_recon
+         # decode obs to 409 dim
+         decoded_obs = decode_data(self.encode_model, obs)
+-        # assert decoded_obs.shape == (32, 100, 409)
++        assert decoded_obs.shape == (32, 100, 409)
+         x_t = obs[:, :-1, :]
+         x_t_1 = obs[:, 1:, :]
+         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         pred_a = self.inv_model(x_comb_t)
+ 
+         # get pred_a by inv_model from generated x_t and x_t_1
+-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+ 
+         return loss, info, balance_loss
+ 
+diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+index 351f9d2..6721527 100644
+--- a/code/diffuser/utils/training.py
++++ b/code/diffuser/utils/training.py
+@@ -114,6 +114,8 @@ class Trainer(object):
+         for step in range(n_train_steps):
+             for i in range(self.gradient_accumulate_every):
+                 batch = next(self.dataloader)
++                print(batch.shape)
++                continue
+                 batch = batch_to_device(batch, device=self.device)
+                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+                 loss = loss / self.gradient_accumulate_everydiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+index 3b470ca..5b2bb45 100644
+--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+@@ -22,4 +22,108 @@ index d62dc31..a47022a 100644
+ +            pass
+  
+          if self.train_only_inv:
+-             # Calculating inv loss
+\ No newline at end of file
++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..49375bc 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++index 3b470ca..410268d 100644
++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
++ +            pass
++  
++          if self.train_only_inv:
++-             # Calculating inv loss
++\ No newline at end of file
+++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..49375bc 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
++\ No newline at end of file
++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..ea24e74 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         obs = x_noisy - x_recon
++         # decode obs to 409 dim
++         decoded_obs = decode_data(self.encode_model, obs)
++-        # assert decoded_obs.shape == (32, 100, 409)
+++        assert decoded_obs.shape == (32, 100, 409)
++         x_t = obs[:, :-1, :]
++         x_t_1 = obs[:, 1:, :]
++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
++ 
++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++index 351f9d2..6721527 100644
++--- a/code/diffuser/utils/training.py
+++++ b/code/diffuser/utils/training.py
++@@ -114,6 +114,8 @@ class Trainer(object):
++         for step in range(n_train_steps):
++             for i in range(self.gradient_accumulate_every):
++                 batch = next(self.dataloader)
+++                print(batch.shape)
+++                continue
++                 batch = batch_to_device(batch, device=self.device)
++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++                 loss = loss / self.gradient_accumulate_every
+\ No newline at end of file
+diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+index 516ab7e..81cd533 100644
+--- a/code/analysis/train.slurm
++++ b/code/analysis/train.slurm
+@@ -1,6 +1,6 @@
+ #!/bin/bash
+ #SBATCH -J load-ddfuser-grid
+-#SBATCH -o res/unfreeze_by_layer.txt
++#SBATCH -o res/balance_loss.txt
+ #SBATCH -c 32
+ #SBATCH --gres=gpu:V100:1
+ #SBATCH --exclude dell-gpu-23
+diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+index a47022a..ea24e74 100644
+--- a/code/diffuser/models/diffusion.py
++++ b/code/diffuser/models/diffusion.py
+@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         obs = x_noisy - x_recon
+         # decode obs to 409 dim
+         decoded_obs = decode_data(self.encode_model, obs)
+-        # assert decoded_obs.shape == (32, 100, 409)
++        assert decoded_obs.shape == (32, 100, 409)
+         x_t = obs[:, :-1, :]
+         x_t_1 = obs[:, 1:, :]
+         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         pred_a = self.inv_model(x_comb_t)
+ 
+         # get pred_a by inv_model from generated x_t and x_t_1
+-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+ 
+         return loss, info, balance_loss
+ 
+diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+index 351f9d2..187050e 100644
+--- a/code/diffuser/utils/training.py
++++ b/code/diffuser/utils/training.py
+@@ -114,6 +114,9 @@ class Trainer(object):
+         for step in range(n_train_steps):
+             for i in range(self.gradient_accumulate_every):
+                 batch = next(self.dataloader)
++                traj, cond, ret = batch
++                print(traj.shape)
++                continue
+                 batch = batch_to_device(batch, device=self.device)
+                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+                 loss = loss / self.gradient_accumulate_everydiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+index 3b470ca..2dd66ba 100644
+--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+@@ -22,4 +22,271 @@ index d62dc31..a47022a 100644
+ +            pass
+  
+          if self.train_only_inv:
+-             # Calculating inv loss
+\ No newline at end of file
++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..49375bc 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++index 3b470ca..410268d 100644
++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
++ +            pass
++  
++          if self.train_only_inv:
++-             # Calculating inv loss
++\ No newline at end of file
+++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..49375bc 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
++\ No newline at end of file
++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..ea24e74 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         obs = x_noisy - x_recon
++         # decode obs to 409 dim
++         decoded_obs = decode_data(self.encode_model, obs)
++-        # assert decoded_obs.shape == (32, 100, 409)
+++        assert decoded_obs.shape == (32, 100, 409)
++         x_t = obs[:, :-1, :]
++         x_t_1 = obs[:, 1:, :]
++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
++ 
++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++index 351f9d2..6721527 100644
++--- a/code/diffuser/utils/training.py
+++++ b/code/diffuser/utils/training.py
++@@ -114,6 +114,8 @@ class Trainer(object):
++         for step in range(n_train_steps):
++             for i in range(self.gradient_accumulate_every):
++                 batch = next(self.dataloader)
+++                print(batch.shape)
+++                continue
++                 batch = batch_to_device(batch, device=self.device)
++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++                 loss = loss / self.gradient_accumulate_everydiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++index 3b470ca..5b2bb45 100644
++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++@@ -22,4 +22,108 @@ index d62dc31..a47022a 100644
++ +            pass
++  
++          if self.train_only_inv:
++-             # Calculating inv loss
++\ No newline at end of file
+++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..49375bc 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++index 3b470ca..410268d 100644
+++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
+++ +            pass
+++  
+++          if self.train_only_inv:
+++-             # Calculating inv loss
+++\ No newline at end of file
++++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++++index 516ab7e..81cd533 100644
++++--- a/code/analysis/train.slurm
+++++++ b/code/analysis/train.slurm
++++@@ -1,6 +1,6 @@
++++ #!/bin/bash
++++ #SBATCH -J load-ddfuser-grid
++++-#SBATCH -o res/unfreeze_by_layer.txt
+++++#SBATCH -o res/balance_loss.txt
++++ #SBATCH -c 32
++++ #SBATCH --gres=gpu:V100:1
++++ #SBATCH --exclude dell-gpu-23
++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++++index a47022a..49375bc 100644
++++--- a/code/diffuser/models/diffusion.py
+++++++ b/code/diffuser/models/diffusion.py
++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         pred_a = self.inv_model(x_comb_t)
++++ 
++++         # get pred_a by inv_model from generated x_t and x_t_1
++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++++ 
++++         return loss, info, balance_loss
+++\ No newline at end of file
+++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..ea24e74 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         obs = x_noisy - x_recon
+++         # decode obs to 409 dim
+++         decoded_obs = decode_data(self.encode_model, obs)
+++-        # assert decoded_obs.shape == (32, 100, 409)
++++        assert decoded_obs.shape == (32, 100, 409)
+++         x_t = obs[:, :-1, :]
+++         x_t_1 = obs[:, 1:, :]
+++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
+++ 
+++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+++index 351f9d2..6721527 100644
+++--- a/code/diffuser/utils/training.py
++++++ b/code/diffuser/utils/training.py
+++@@ -114,6 +114,8 @@ class Trainer(object):
+++         for step in range(n_train_steps):
+++             for i in range(self.gradient_accumulate_every):
+++                 batch = next(self.dataloader)
++++                print(batch.shape)
++++                continue
+++                 batch = batch_to_device(batch, device=self.device)
+++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+++                 loss = loss / self.gradient_accumulate_every
++\ No newline at end of file
++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..ea24e74 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         obs = x_noisy - x_recon
++         # decode obs to 409 dim
++         decoded_obs = decode_data(self.encode_model, obs)
++-        # assert decoded_obs.shape == (32, 100, 409)
+++        assert decoded_obs.shape == (32, 100, 409)
++         x_t = obs[:, :-1, :]
++         x_t_1 = obs[:, 1:, :]
++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
++ 
++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++index 351f9d2..187050e 100644
++--- a/code/diffuser/utils/training.py
+++++ b/code/diffuser/utils/training.py
++@@ -114,6 +114,9 @@ class Trainer(object):
++         for step in range(n_train_steps):
++             for i in range(self.gradient_accumulate_every):
++                 batch = next(self.dataloader)
+++                traj, cond, ret = batch
+++                print(traj.shape)
+++                continue
++                 batch = batch_to_device(batch, device=self.device)
++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++                 loss = loss / self.gradient_accumulate_every
+\ No newline at end of file
+diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+index 516ab7e..81cd533 100644
+--- a/code/analysis/train.slurm
++++ b/code/analysis/train.slurm
+@@ -1,6 +1,6 @@
+ #!/bin/bash
+ #SBATCH -J load-ddfuser-grid
+-#SBATCH -o res/unfreeze_by_layer.txt
++#SBATCH -o res/balance_loss.txt
+ #SBATCH -c 32
+ #SBATCH --gres=gpu:V100:1
+ #SBATCH --exclude dell-gpu-23
+diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+index a47022a..ea24e74 100644
+--- a/code/diffuser/models/diffusion.py
++++ b/code/diffuser/models/diffusion.py
+@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         obs = x_noisy - x_recon
+         # decode obs to 409 dim
+         decoded_obs = decode_data(self.encode_model, obs)
+-        # assert decoded_obs.shape == (32, 100, 409)
++        assert decoded_obs.shape == (32, 100, 409)
+         x_t = obs[:, :-1, :]
+         x_t_1 = obs[:, 1:, :]
+         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         pred_a = self.inv_model(x_comb_t)
+ 
+         # get pred_a by inv_model from generated x_t and x_t_1
+-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+ 
+         return loss, info, balance_loss
+ 
+diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+index 351f9d2..7910030 100644
+--- a/code/diffuser/utils/training.py
++++ b/code/diffuser/utils/training.py
+@@ -114,11 +114,15 @@ class Trainer(object):
+         for step in range(n_train_steps):
+             for i in range(self.gradient_accumulate_every):
+                 batch = next(self.dataloader)
++                traj, cond, ret = batch
++                print(traj.shape)
++                continue
+                 batch = batch_to_device(batch, device=self.device)
+                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+                 loss = loss / self.gradient_accumulate_every
+                 loss.backward()
+ 
++            continue
+             self.optimizer.step()
+             self.optimizer.zero_grad()diff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+index 3b470ca..ddbb48f 100644
+--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+@@ -22,4 +22,602 @@ index d62dc31..a47022a 100644
+ +            pass
+  
+          if self.train_only_inv:
+-             # Calculating inv loss
+\ No newline at end of file
++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..49375bc 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++index 3b470ca..410268d 100644
++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
++ +            pass
++  
++          if self.train_only_inv:
++-             # Calculating inv loss
++\ No newline at end of file
+++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..49375bc 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
++\ No newline at end of file
++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..ea24e74 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         obs = x_noisy - x_recon
++         # decode obs to 409 dim
++         decoded_obs = decode_data(self.encode_model, obs)
++-        # assert decoded_obs.shape == (32, 100, 409)
+++        assert decoded_obs.shape == (32, 100, 409)
++         x_t = obs[:, :-1, :]
++         x_t_1 = obs[:, 1:, :]
++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
++ 
++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++index 351f9d2..6721527 100644
++--- a/code/diffuser/utils/training.py
+++++ b/code/diffuser/utils/training.py
++@@ -114,6 +114,8 @@ class Trainer(object):
++         for step in range(n_train_steps):
++             for i in range(self.gradient_accumulate_every):
++                 batch = next(self.dataloader)
+++                print(batch.shape)
+++                continue
++                 batch = batch_to_device(batch, device=self.device)
++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++                 loss = loss / self.gradient_accumulate_everydiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++index 3b470ca..5b2bb45 100644
++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++@@ -22,4 +22,108 @@ index d62dc31..a47022a 100644
++ +            pass
++  
++          if self.train_only_inv:
++-             # Calculating inv loss
++\ No newline at end of file
+++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..49375bc 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++index 3b470ca..410268d 100644
+++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
+++ +            pass
+++  
+++          if self.train_only_inv:
+++-             # Calculating inv loss
+++\ No newline at end of file
++++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++++index 516ab7e..81cd533 100644
++++--- a/code/analysis/train.slurm
+++++++ b/code/analysis/train.slurm
++++@@ -1,6 +1,6 @@
++++ #!/bin/bash
++++ #SBATCH -J load-ddfuser-grid
++++-#SBATCH -o res/unfreeze_by_layer.txt
+++++#SBATCH -o res/balance_loss.txt
++++ #SBATCH -c 32
++++ #SBATCH --gres=gpu:V100:1
++++ #SBATCH --exclude dell-gpu-23
++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++++index a47022a..49375bc 100644
++++--- a/code/diffuser/models/diffusion.py
+++++++ b/code/diffuser/models/diffusion.py
++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         pred_a = self.inv_model(x_comb_t)
++++ 
++++         # get pred_a by inv_model from generated x_t and x_t_1
++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++++ 
++++         return loss, info, balance_loss
+++\ No newline at end of file
+++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..ea24e74 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         obs = x_noisy - x_recon
+++         # decode obs to 409 dim
+++         decoded_obs = decode_data(self.encode_model, obs)
+++-        # assert decoded_obs.shape == (32, 100, 409)
++++        assert decoded_obs.shape == (32, 100, 409)
+++         x_t = obs[:, :-1, :]
+++         x_t_1 = obs[:, 1:, :]
+++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
+++ 
+++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+++index 351f9d2..6721527 100644
+++--- a/code/diffuser/utils/training.py
++++++ b/code/diffuser/utils/training.py
+++@@ -114,6 +114,8 @@ class Trainer(object):
+++         for step in range(n_train_steps):
+++             for i in range(self.gradient_accumulate_every):
+++                 batch = next(self.dataloader)
++++                print(batch.shape)
++++                continue
+++                 batch = batch_to_device(batch, device=self.device)
+++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+++                 loss = loss / self.gradient_accumulate_every
++\ No newline at end of file
++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..ea24e74 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         obs = x_noisy - x_recon
++         # decode obs to 409 dim
++         decoded_obs = decode_data(self.encode_model, obs)
++-        # assert decoded_obs.shape == (32, 100, 409)
+++        assert decoded_obs.shape == (32, 100, 409)
++         x_t = obs[:, :-1, :]
++         x_t_1 = obs[:, 1:, :]
++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
++ 
++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++index 351f9d2..187050e 100644
++--- a/code/diffuser/utils/training.py
+++++ b/code/diffuser/utils/training.py
++@@ -114,6 +114,9 @@ class Trainer(object):
++         for step in range(n_train_steps):
++             for i in range(self.gradient_accumulate_every):
++                 batch = next(self.dataloader)
+++                traj, cond, ret = batch
+++                print(traj.shape)
+++                continue
++                 batch = batch_to_device(batch, device=self.device)
++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++                 loss = loss / self.gradient_accumulate_everydiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++index 3b470ca..2dd66ba 100644
++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++@@ -22,4 +22,271 @@ index d62dc31..a47022a 100644
++ +            pass
++  
++          if self.train_only_inv:
++-             # Calculating inv loss
++\ No newline at end of file
+++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..49375bc 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++index 3b470ca..410268d 100644
+++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
+++ +            pass
+++  
+++          if self.train_only_inv:
+++-             # Calculating inv loss
+++\ No newline at end of file
++++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++++index 516ab7e..81cd533 100644
++++--- a/code/analysis/train.slurm
+++++++ b/code/analysis/train.slurm
++++@@ -1,6 +1,6 @@
++++ #!/bin/bash
++++ #SBATCH -J load-ddfuser-grid
++++-#SBATCH -o res/unfreeze_by_layer.txt
+++++#SBATCH -o res/balance_loss.txt
++++ #SBATCH -c 32
++++ #SBATCH --gres=gpu:V100:1
++++ #SBATCH --exclude dell-gpu-23
++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++++index a47022a..49375bc 100644
++++--- a/code/diffuser/models/diffusion.py
+++++++ b/code/diffuser/models/diffusion.py
++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         pred_a = self.inv_model(x_comb_t)
++++ 
++++         # get pred_a by inv_model from generated x_t and x_t_1
++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++++ 
++++         return loss, info, balance_loss
+++\ No newline at end of file
+++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..ea24e74 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         obs = x_noisy - x_recon
+++         # decode obs to 409 dim
+++         decoded_obs = decode_data(self.encode_model, obs)
+++-        # assert decoded_obs.shape == (32, 100, 409)
++++        assert decoded_obs.shape == (32, 100, 409)
+++         x_t = obs[:, :-1, :]
+++         x_t_1 = obs[:, 1:, :]
+++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
+++ 
+++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+++index 351f9d2..6721527 100644
+++--- a/code/diffuser/utils/training.py
++++++ b/code/diffuser/utils/training.py
+++@@ -114,6 +114,8 @@ class Trainer(object):
+++         for step in range(n_train_steps):
+++             for i in range(self.gradient_accumulate_every):
+++                 batch = next(self.dataloader)
++++                print(batch.shape)
++++                continue
+++                 batch = batch_to_device(batch, device=self.device)
+++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+++                 loss = loss / self.gradient_accumulate_everydiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++index 3b470ca..5b2bb45 100644
+++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++@@ -22,4 +22,108 @@ index d62dc31..a47022a 100644
+++ +            pass
+++  
+++          if self.train_only_inv:
+++-             # Calculating inv loss
+++\ No newline at end of file
++++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++++index 516ab7e..81cd533 100644
++++--- a/code/analysis/train.slurm
+++++++ b/code/analysis/train.slurm
++++@@ -1,6 +1,6 @@
++++ #!/bin/bash
++++ #SBATCH -J load-ddfuser-grid
++++-#SBATCH -o res/unfreeze_by_layer.txt
+++++#SBATCH -o res/balance_loss.txt
++++ #SBATCH -c 32
++++ #SBATCH --gres=gpu:V100:1
++++ #SBATCH --exclude dell-gpu-23
++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++++index a47022a..49375bc 100644
++++--- a/code/diffuser/models/diffusion.py
+++++++ b/code/diffuser/models/diffusion.py
++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         pred_a = self.inv_model(x_comb_t)
++++ 
++++         # get pred_a by inv_model from generated x_t and x_t_1
++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++++ 
++++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++index 3b470ca..410268d 100644
++++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
++++ +            pass
++++  
++++          if self.train_only_inv:
++++-             # Calculating inv loss
++++\ No newline at end of file
+++++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++++index 516ab7e..81cd533 100644
+++++--- a/code/analysis/train.slurm
++++++++ b/code/analysis/train.slurm
+++++@@ -1,6 +1,6 @@
+++++ #!/bin/bash
+++++ #SBATCH -J load-ddfuser-grid
+++++-#SBATCH -o res/unfreeze_by_layer.txt
++++++#SBATCH -o res/balance_loss.txt
+++++ #SBATCH -c 32
+++++ #SBATCH --gres=gpu:V100:1
+++++ #SBATCH --exclude dell-gpu-23
+++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++++index a47022a..49375bc 100644
+++++--- a/code/diffuser/models/diffusion.py
++++++++ b/code/diffuser/models/diffusion.py
+++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++++         pred_a = self.inv_model(x_comb_t)
+++++ 
+++++         # get pred_a by inv_model from generated x_t and x_t_1
+++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++++ 
+++++         return loss, info, balance_loss
++++\ No newline at end of file
++++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++++index 516ab7e..81cd533 100644
++++--- a/code/analysis/train.slurm
+++++++ b/code/analysis/train.slurm
++++@@ -1,6 +1,6 @@
++++ #!/bin/bash
++++ #SBATCH -J load-ddfuser-grid
++++-#SBATCH -o res/unfreeze_by_layer.txt
+++++#SBATCH -o res/balance_loss.txt
++++ #SBATCH -c 32
++++ #SBATCH --gres=gpu:V100:1
++++ #SBATCH --exclude dell-gpu-23
++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++++index a47022a..ea24e74 100644
++++--- a/code/diffuser/models/diffusion.py
+++++++ b/code/diffuser/models/diffusion.py
++++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         obs = x_noisy - x_recon
++++         # decode obs to 409 dim
++++         decoded_obs = decode_data(self.encode_model, obs)
++++-        # assert decoded_obs.shape == (32, 100, 409)
+++++        assert decoded_obs.shape == (32, 100, 409)
++++         x_t = obs[:, :-1, :]
++++         x_t_1 = obs[:, 1:, :]
++++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         pred_a = self.inv_model(x_comb_t)
++++ 
++++         # get pred_a by inv_model from generated x_t and x_t_1
++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++++ 
++++         return loss, info, balance_loss
++++ 
++++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++++index 351f9d2..6721527 100644
++++--- a/code/diffuser/utils/training.py
+++++++ b/code/diffuser/utils/training.py
++++@@ -114,6 +114,8 @@ class Trainer(object):
++++         for step in range(n_train_steps):
++++             for i in range(self.gradient_accumulate_every):
++++                 batch = next(self.dataloader)
+++++                print(batch.shape)
+++++                continue
++++                 batch = batch_to_device(batch, device=self.device)
++++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++++                 loss = loss / self.gradient_accumulate_every
+++\ No newline at end of file
+++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..ea24e74 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         obs = x_noisy - x_recon
+++         # decode obs to 409 dim
+++         decoded_obs = decode_data(self.encode_model, obs)
+++-        # assert decoded_obs.shape == (32, 100, 409)
++++        assert decoded_obs.shape == (32, 100, 409)
+++         x_t = obs[:, :-1, :]
+++         x_t_1 = obs[:, 1:, :]
+++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
+++ 
+++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+++index 351f9d2..187050e 100644
+++--- a/code/diffuser/utils/training.py
++++++ b/code/diffuser/utils/training.py
+++@@ -114,6 +114,9 @@ class Trainer(object):
+++         for step in range(n_train_steps):
+++             for i in range(self.gradient_accumulate_every):
+++                 batch = next(self.dataloader)
++++                traj, cond, ret = batch
++++                print(traj.shape)
++++                continue
+++                 batch = batch_to_device(batch, device=self.device)
+++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+++                 loss = loss / self.gradient_accumulate_every
++\ No newline at end of file
++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..ea24e74 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         obs = x_noisy - x_recon
++         # decode obs to 409 dim
++         decoded_obs = decode_data(self.encode_model, obs)
++-        # assert decoded_obs.shape == (32, 100, 409)
+++        assert decoded_obs.shape == (32, 100, 409)
++         x_t = obs[:, :-1, :]
++         x_t_1 = obs[:, 1:, :]
++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
++ 
++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++index 351f9d2..7910030 100644
++--- a/code/diffuser/utils/training.py
+++++ b/code/diffuser/utils/training.py
++@@ -114,11 +114,15 @@ class Trainer(object):
++         for step in range(n_train_steps):
++             for i in range(self.gradient_accumulate_every):
++                 batch = next(self.dataloader)
+++                traj, cond, ret = batch
+++                print(traj.shape)
+++                continue
++                 batch = batch_to_device(batch, device=self.device)
++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++                 loss = loss / self.gradient_accumulate_every
++                 loss.backward()
++ 
+++            continue
++             self.optimizer.step()
++             self.optimizer.zero_grad()
+\ No newline at end of file
+diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+index 516ab7e..81cd533 100644
+--- a/code/analysis/train.slurm
++++ b/code/analysis/train.slurm
+@@ -1,6 +1,6 @@
+ #!/bin/bash
+ #SBATCH -J load-ddfuser-grid
+-#SBATCH -o res/unfreeze_by_layer.txt
++#SBATCH -o res/balance_loss.txt
+ #SBATCH -c 32
+ #SBATCH --gres=gpu:V100:1
+ #SBATCH --exclude dell-gpu-23
+diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+index a47022a..ea24e74 100644
+--- a/code/diffuser/models/diffusion.py
++++ b/code/diffuser/models/diffusion.py
+@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         obs = x_noisy - x_recon
+         # decode obs to 409 dim
+         decoded_obs = decode_data(self.encode_model, obs)
+-        # assert decoded_obs.shape == (32, 100, 409)
++        assert decoded_obs.shape == (32, 100, 409)
+         x_t = obs[:, :-1, :]
+         x_t_1 = obs[:, 1:, :]
+         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         pred_a = self.inv_model(x_comb_t)
+ 
+         # get pred_a by inv_model from generated x_t and x_t_1
+-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+ 
+         return loss, info, balance_loss
+ 
+diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+index 351f9d2..6411878 100644
+--- a/code/diffuser/utils/training.py
++++ b/code/diffuser/utils/training.py
+@@ -114,11 +114,16 @@ class Trainer(object):
+         for step in range(n_train_steps):
+             for i in range(self.gradient_accumulate_every):
+                 batch = next(self.dataloader)
++                traj, cond, ret = batch
++                print(traj.shape)
++                assert traj.shape[0] == 32
++                continue
+                 batch = batch_to_device(batch, device=self.device)
+                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+                 loss = loss / self.gradient_accumulate_every
+                 loss.backward()
+ 
++            continue
+             self.optimizer.step()
+             self.optimizer.zero_grad()diff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+index 3b470ca..b64e2c6 100644
+--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+@@ -22,4 +22,1265 @@ index d62dc31..a47022a 100644
+ +            pass
+  
+          if self.train_only_inv:
+-             # Calculating inv loss
+\ No newline at end of file
++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..49375bc 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++index 3b470ca..410268d 100644
++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
++ +            pass
++  
++          if self.train_only_inv:
++-             # Calculating inv loss
++\ No newline at end of file
+++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..49375bc 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
++\ No newline at end of file
++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..ea24e74 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         obs = x_noisy - x_recon
++         # decode obs to 409 dim
++         decoded_obs = decode_data(self.encode_model, obs)
++-        # assert decoded_obs.shape == (32, 100, 409)
+++        assert decoded_obs.shape == (32, 100, 409)
++         x_t = obs[:, :-1, :]
++         x_t_1 = obs[:, 1:, :]
++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
++ 
++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++index 351f9d2..6721527 100644
++--- a/code/diffuser/utils/training.py
+++++ b/code/diffuser/utils/training.py
++@@ -114,6 +114,8 @@ class Trainer(object):
++         for step in range(n_train_steps):
++             for i in range(self.gradient_accumulate_every):
++                 batch = next(self.dataloader)
+++                print(batch.shape)
+++                continue
++                 batch = batch_to_device(batch, device=self.device)
++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++                 loss = loss / self.gradient_accumulate_everydiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++index 3b470ca..5b2bb45 100644
++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++@@ -22,4 +22,108 @@ index d62dc31..a47022a 100644
++ +            pass
++  
++          if self.train_only_inv:
++-             # Calculating inv loss
++\ No newline at end of file
+++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..49375bc 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++index 3b470ca..410268d 100644
+++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
+++ +            pass
+++  
+++          if self.train_only_inv:
+++-             # Calculating inv loss
+++\ No newline at end of file
++++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++++index 516ab7e..81cd533 100644
++++--- a/code/analysis/train.slurm
+++++++ b/code/analysis/train.slurm
++++@@ -1,6 +1,6 @@
++++ #!/bin/bash
++++ #SBATCH -J load-ddfuser-grid
++++-#SBATCH -o res/unfreeze_by_layer.txt
+++++#SBATCH -o res/balance_loss.txt
++++ #SBATCH -c 32
++++ #SBATCH --gres=gpu:V100:1
++++ #SBATCH --exclude dell-gpu-23
++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++++index a47022a..49375bc 100644
++++--- a/code/diffuser/models/diffusion.py
+++++++ b/code/diffuser/models/diffusion.py
++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         pred_a = self.inv_model(x_comb_t)
++++ 
++++         # get pred_a by inv_model from generated x_t and x_t_1
++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++++ 
++++         return loss, info, balance_loss
+++\ No newline at end of file
+++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..ea24e74 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         obs = x_noisy - x_recon
+++         # decode obs to 409 dim
+++         decoded_obs = decode_data(self.encode_model, obs)
+++-        # assert decoded_obs.shape == (32, 100, 409)
++++        assert decoded_obs.shape == (32, 100, 409)
+++         x_t = obs[:, :-1, :]
+++         x_t_1 = obs[:, 1:, :]
+++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
+++ 
+++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+++index 351f9d2..6721527 100644
+++--- a/code/diffuser/utils/training.py
++++++ b/code/diffuser/utils/training.py
+++@@ -114,6 +114,8 @@ class Trainer(object):
+++         for step in range(n_train_steps):
+++             for i in range(self.gradient_accumulate_every):
+++                 batch = next(self.dataloader)
++++                print(batch.shape)
++++                continue
+++                 batch = batch_to_device(batch, device=self.device)
+++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+++                 loss = loss / self.gradient_accumulate_every
++\ No newline at end of file
++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..ea24e74 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         obs = x_noisy - x_recon
++         # decode obs to 409 dim
++         decoded_obs = decode_data(self.encode_model, obs)
++-        # assert decoded_obs.shape == (32, 100, 409)
+++        assert decoded_obs.shape == (32, 100, 409)
++         x_t = obs[:, :-1, :]
++         x_t_1 = obs[:, 1:, :]
++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
++ 
++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++index 351f9d2..187050e 100644
++--- a/code/diffuser/utils/training.py
+++++ b/code/diffuser/utils/training.py
++@@ -114,6 +114,9 @@ class Trainer(object):
++         for step in range(n_train_steps):
++             for i in range(self.gradient_accumulate_every):
++                 batch = next(self.dataloader)
+++                traj, cond, ret = batch
+++                print(traj.shape)
+++                continue
++                 batch = batch_to_device(batch, device=self.device)
++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++                 loss = loss / self.gradient_accumulate_everydiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++index 3b470ca..2dd66ba 100644
++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++@@ -22,4 +22,271 @@ index d62dc31..a47022a 100644
++ +            pass
++  
++          if self.train_only_inv:
++-             # Calculating inv loss
++\ No newline at end of file
+++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..49375bc 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++index 3b470ca..410268d 100644
+++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
+++ +            pass
+++  
+++          if self.train_only_inv:
+++-             # Calculating inv loss
+++\ No newline at end of file
++++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++++index 516ab7e..81cd533 100644
++++--- a/code/analysis/train.slurm
+++++++ b/code/analysis/train.slurm
++++@@ -1,6 +1,6 @@
++++ #!/bin/bash
++++ #SBATCH -J load-ddfuser-grid
++++-#SBATCH -o res/unfreeze_by_layer.txt
+++++#SBATCH -o res/balance_loss.txt
++++ #SBATCH -c 32
++++ #SBATCH --gres=gpu:V100:1
++++ #SBATCH --exclude dell-gpu-23
++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++++index a47022a..49375bc 100644
++++--- a/code/diffuser/models/diffusion.py
+++++++ b/code/diffuser/models/diffusion.py
++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         pred_a = self.inv_model(x_comb_t)
++++ 
++++         # get pred_a by inv_model from generated x_t and x_t_1
++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++++ 
++++         return loss, info, balance_loss
+++\ No newline at end of file
+++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..ea24e74 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         obs = x_noisy - x_recon
+++         # decode obs to 409 dim
+++         decoded_obs = decode_data(self.encode_model, obs)
+++-        # assert decoded_obs.shape == (32, 100, 409)
++++        assert decoded_obs.shape == (32, 100, 409)
+++         x_t = obs[:, :-1, :]
+++         x_t_1 = obs[:, 1:, :]
+++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
+++ 
+++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+++index 351f9d2..6721527 100644
+++--- a/code/diffuser/utils/training.py
++++++ b/code/diffuser/utils/training.py
+++@@ -114,6 +114,8 @@ class Trainer(object):
+++         for step in range(n_train_steps):
+++             for i in range(self.gradient_accumulate_every):
+++                 batch = next(self.dataloader)
++++                print(batch.shape)
++++                continue
+++                 batch = batch_to_device(batch, device=self.device)
+++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+++                 loss = loss / self.gradient_accumulate_everydiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++index 3b470ca..5b2bb45 100644
+++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++@@ -22,4 +22,108 @@ index d62dc31..a47022a 100644
+++ +            pass
+++  
+++          if self.train_only_inv:
+++-             # Calculating inv loss
+++\ No newline at end of file
++++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++++index 516ab7e..81cd533 100644
++++--- a/code/analysis/train.slurm
+++++++ b/code/analysis/train.slurm
++++@@ -1,6 +1,6 @@
++++ #!/bin/bash
++++ #SBATCH -J load-ddfuser-grid
++++-#SBATCH -o res/unfreeze_by_layer.txt
+++++#SBATCH -o res/balance_loss.txt
++++ #SBATCH -c 32
++++ #SBATCH --gres=gpu:V100:1
++++ #SBATCH --exclude dell-gpu-23
++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++++index a47022a..49375bc 100644
++++--- a/code/diffuser/models/diffusion.py
+++++++ b/code/diffuser/models/diffusion.py
++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         pred_a = self.inv_model(x_comb_t)
++++ 
++++         # get pred_a by inv_model from generated x_t and x_t_1
++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++++ 
++++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++index 3b470ca..410268d 100644
++++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
++++ +            pass
++++  
++++          if self.train_only_inv:
++++-             # Calculating inv loss
++++\ No newline at end of file
+++++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++++index 516ab7e..81cd533 100644
+++++--- a/code/analysis/train.slurm
++++++++ b/code/analysis/train.slurm
+++++@@ -1,6 +1,6 @@
+++++ #!/bin/bash
+++++ #SBATCH -J load-ddfuser-grid
+++++-#SBATCH -o res/unfreeze_by_layer.txt
++++++#SBATCH -o res/balance_loss.txt
+++++ #SBATCH -c 32
+++++ #SBATCH --gres=gpu:V100:1
+++++ #SBATCH --exclude dell-gpu-23
+++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++++index a47022a..49375bc 100644
+++++--- a/code/diffuser/models/diffusion.py
++++++++ b/code/diffuser/models/diffusion.py
+++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++++         pred_a = self.inv_model(x_comb_t)
+++++ 
+++++         # get pred_a by inv_model from generated x_t and x_t_1
+++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++++ 
+++++         return loss, info, balance_loss
++++\ No newline at end of file
++++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++++index 516ab7e..81cd533 100644
++++--- a/code/analysis/train.slurm
+++++++ b/code/analysis/train.slurm
++++@@ -1,6 +1,6 @@
++++ #!/bin/bash
++++ #SBATCH -J load-ddfuser-grid
++++-#SBATCH -o res/unfreeze_by_layer.txt
+++++#SBATCH -o res/balance_loss.txt
++++ #SBATCH -c 32
++++ #SBATCH --gres=gpu:V100:1
++++ #SBATCH --exclude dell-gpu-23
++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++++index a47022a..ea24e74 100644
++++--- a/code/diffuser/models/diffusion.py
+++++++ b/code/diffuser/models/diffusion.py
++++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         obs = x_noisy - x_recon
++++         # decode obs to 409 dim
++++         decoded_obs = decode_data(self.encode_model, obs)
++++-        # assert decoded_obs.shape == (32, 100, 409)
+++++        assert decoded_obs.shape == (32, 100, 409)
++++         x_t = obs[:, :-1, :]
++++         x_t_1 = obs[:, 1:, :]
++++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         pred_a = self.inv_model(x_comb_t)
++++ 
++++         # get pred_a by inv_model from generated x_t and x_t_1
++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++++ 
++++         return loss, info, balance_loss
++++ 
++++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++++index 351f9d2..6721527 100644
++++--- a/code/diffuser/utils/training.py
+++++++ b/code/diffuser/utils/training.py
++++@@ -114,6 +114,8 @@ class Trainer(object):
++++         for step in range(n_train_steps):
++++             for i in range(self.gradient_accumulate_every):
++++                 batch = next(self.dataloader)
+++++                print(batch.shape)
+++++                continue
++++                 batch = batch_to_device(batch, device=self.device)
++++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++++                 loss = loss / self.gradient_accumulate_every
+++\ No newline at end of file
+++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..ea24e74 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         obs = x_noisy - x_recon
+++         # decode obs to 409 dim
+++         decoded_obs = decode_data(self.encode_model, obs)
+++-        # assert decoded_obs.shape == (32, 100, 409)
++++        assert decoded_obs.shape == (32, 100, 409)
+++         x_t = obs[:, :-1, :]
+++         x_t_1 = obs[:, 1:, :]
+++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
+++ 
+++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+++index 351f9d2..187050e 100644
+++--- a/code/diffuser/utils/training.py
++++++ b/code/diffuser/utils/training.py
+++@@ -114,6 +114,9 @@ class Trainer(object):
+++         for step in range(n_train_steps):
+++             for i in range(self.gradient_accumulate_every):
+++                 batch = next(self.dataloader)
++++                traj, cond, ret = batch
++++                print(traj.shape)
++++                continue
+++                 batch = batch_to_device(batch, device=self.device)
+++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+++                 loss = loss / self.gradient_accumulate_every
++\ No newline at end of file
++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..ea24e74 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         obs = x_noisy - x_recon
++         # decode obs to 409 dim
++         decoded_obs = decode_data(self.encode_model, obs)
++-        # assert decoded_obs.shape == (32, 100, 409)
+++        assert decoded_obs.shape == (32, 100, 409)
++         x_t = obs[:, :-1, :]
++         x_t_1 = obs[:, 1:, :]
++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
++ 
++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++index 351f9d2..7910030 100644
++--- a/code/diffuser/utils/training.py
+++++ b/code/diffuser/utils/training.py
++@@ -114,11 +114,15 @@ class Trainer(object):
++         for step in range(n_train_steps):
++             for i in range(self.gradient_accumulate_every):
++                 batch = next(self.dataloader)
+++                traj, cond, ret = batch
+++                print(traj.shape)
+++                continue
++                 batch = batch_to_device(batch, device=self.device)
++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++                 loss = loss / self.gradient_accumulate_every
++                 loss.backward()
++ 
+++            continue
++             self.optimizer.step()
++             self.optimizer.zero_grad()diff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++index 3b470ca..ddbb48f 100644
++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++@@ -22,4 +22,602 @@ index d62dc31..a47022a 100644
++ +            pass
++  
++          if self.train_only_inv:
++-             # Calculating inv loss
++\ No newline at end of file
+++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..49375bc 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++index 3b470ca..410268d 100644
+++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
+++ +            pass
+++  
+++          if self.train_only_inv:
+++-             # Calculating inv loss
+++\ No newline at end of file
++++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++++index 516ab7e..81cd533 100644
++++--- a/code/analysis/train.slurm
+++++++ b/code/analysis/train.slurm
++++@@ -1,6 +1,6 @@
++++ #!/bin/bash
++++ #SBATCH -J load-ddfuser-grid
++++-#SBATCH -o res/unfreeze_by_layer.txt
+++++#SBATCH -o res/balance_loss.txt
++++ #SBATCH -c 32
++++ #SBATCH --gres=gpu:V100:1
++++ #SBATCH --exclude dell-gpu-23
++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++++index a47022a..49375bc 100644
++++--- a/code/diffuser/models/diffusion.py
+++++++ b/code/diffuser/models/diffusion.py
++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         pred_a = self.inv_model(x_comb_t)
++++ 
++++         # get pred_a by inv_model from generated x_t and x_t_1
++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++++ 
++++         return loss, info, balance_loss
+++\ No newline at end of file
+++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..ea24e74 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         obs = x_noisy - x_recon
+++         # decode obs to 409 dim
+++         decoded_obs = decode_data(self.encode_model, obs)
+++-        # assert decoded_obs.shape == (32, 100, 409)
++++        assert decoded_obs.shape == (32, 100, 409)
+++         x_t = obs[:, :-1, :]
+++         x_t_1 = obs[:, 1:, :]
+++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
+++ 
+++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+++index 351f9d2..6721527 100644
+++--- a/code/diffuser/utils/training.py
++++++ b/code/diffuser/utils/training.py
+++@@ -114,6 +114,8 @@ class Trainer(object):
+++         for step in range(n_train_steps):
+++             for i in range(self.gradient_accumulate_every):
+++                 batch = next(self.dataloader)
++++                print(batch.shape)
++++                continue
+++                 batch = batch_to_device(batch, device=self.device)
+++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+++                 loss = loss / self.gradient_accumulate_everydiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++index 3b470ca..5b2bb45 100644
+++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++@@ -22,4 +22,108 @@ index d62dc31..a47022a 100644
+++ +            pass
+++  
+++          if self.train_only_inv:
+++-             # Calculating inv loss
+++\ No newline at end of file
++++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++++index 516ab7e..81cd533 100644
++++--- a/code/analysis/train.slurm
+++++++ b/code/analysis/train.slurm
++++@@ -1,6 +1,6 @@
++++ #!/bin/bash
++++ #SBATCH -J load-ddfuser-grid
++++-#SBATCH -o res/unfreeze_by_layer.txt
+++++#SBATCH -o res/balance_loss.txt
++++ #SBATCH -c 32
++++ #SBATCH --gres=gpu:V100:1
++++ #SBATCH --exclude dell-gpu-23
++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++++index a47022a..49375bc 100644
++++--- a/code/diffuser/models/diffusion.py
+++++++ b/code/diffuser/models/diffusion.py
++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         pred_a = self.inv_model(x_comb_t)
++++ 
++++         # get pred_a by inv_model from generated x_t and x_t_1
++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++++ 
++++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++index 3b470ca..410268d 100644
++++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
++++ +            pass
++++  
++++          if self.train_only_inv:
++++-             # Calculating inv loss
++++\ No newline at end of file
+++++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++++index 516ab7e..81cd533 100644
+++++--- a/code/analysis/train.slurm
++++++++ b/code/analysis/train.slurm
+++++@@ -1,6 +1,6 @@
+++++ #!/bin/bash
+++++ #SBATCH -J load-ddfuser-grid
+++++-#SBATCH -o res/unfreeze_by_layer.txt
++++++#SBATCH -o res/balance_loss.txt
+++++ #SBATCH -c 32
+++++ #SBATCH --gres=gpu:V100:1
+++++ #SBATCH --exclude dell-gpu-23
+++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++++index a47022a..49375bc 100644
+++++--- a/code/diffuser/models/diffusion.py
++++++++ b/code/diffuser/models/diffusion.py
+++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++++         pred_a = self.inv_model(x_comb_t)
+++++ 
+++++         # get pred_a by inv_model from generated x_t and x_t_1
+++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++++ 
+++++         return loss, info, balance_loss
++++\ No newline at end of file
++++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++++index 516ab7e..81cd533 100644
++++--- a/code/analysis/train.slurm
+++++++ b/code/analysis/train.slurm
++++@@ -1,6 +1,6 @@
++++ #!/bin/bash
++++ #SBATCH -J load-ddfuser-grid
++++-#SBATCH -o res/unfreeze_by_layer.txt
+++++#SBATCH -o res/balance_loss.txt
++++ #SBATCH -c 32
++++ #SBATCH --gres=gpu:V100:1
++++ #SBATCH --exclude dell-gpu-23
++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++++index a47022a..ea24e74 100644
++++--- a/code/diffuser/models/diffusion.py
+++++++ b/code/diffuser/models/diffusion.py
++++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         obs = x_noisy - x_recon
++++         # decode obs to 409 dim
++++         decoded_obs = decode_data(self.encode_model, obs)
++++-        # assert decoded_obs.shape == (32, 100, 409)
+++++        assert decoded_obs.shape == (32, 100, 409)
++++         x_t = obs[:, :-1, :]
++++         x_t_1 = obs[:, 1:, :]
++++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         pred_a = self.inv_model(x_comb_t)
++++ 
++++         # get pred_a by inv_model from generated x_t and x_t_1
++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++++ 
++++         return loss, info, balance_loss
++++ 
++++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++++index 351f9d2..6721527 100644
++++--- a/code/diffuser/utils/training.py
+++++++ b/code/diffuser/utils/training.py
++++@@ -114,6 +114,8 @@ class Trainer(object):
++++         for step in range(n_train_steps):
++++             for i in range(self.gradient_accumulate_every):
++++                 batch = next(self.dataloader)
+++++                print(batch.shape)
+++++                continue
++++                 batch = batch_to_device(batch, device=self.device)
++++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++++                 loss = loss / self.gradient_accumulate_every
+++\ No newline at end of file
+++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..ea24e74 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         obs = x_noisy - x_recon
+++         # decode obs to 409 dim
+++         decoded_obs = decode_data(self.encode_model, obs)
+++-        # assert decoded_obs.shape == (32, 100, 409)
++++        assert decoded_obs.shape == (32, 100, 409)
+++         x_t = obs[:, :-1, :]
+++         x_t_1 = obs[:, 1:, :]
+++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
+++ 
+++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+++index 351f9d2..187050e 100644
+++--- a/code/diffuser/utils/training.py
++++++ b/code/diffuser/utils/training.py
+++@@ -114,6 +114,9 @@ class Trainer(object):
+++         for step in range(n_train_steps):
+++             for i in range(self.gradient_accumulate_every):
+++                 batch = next(self.dataloader)
++++                traj, cond, ret = batch
++++                print(traj.shape)
++++                continue
+++                 batch = batch_to_device(batch, device=self.device)
+++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+++                 loss = loss / self.gradient_accumulate_everydiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++index 3b470ca..2dd66ba 100644
+++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++@@ -22,4 +22,271 @@ index d62dc31..a47022a 100644
+++ +            pass
+++  
+++          if self.train_only_inv:
+++-             # Calculating inv loss
+++\ No newline at end of file
++++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++++index 516ab7e..81cd533 100644
++++--- a/code/analysis/train.slurm
+++++++ b/code/analysis/train.slurm
++++@@ -1,6 +1,6 @@
++++ #!/bin/bash
++++ #SBATCH -J load-ddfuser-grid
++++-#SBATCH -o res/unfreeze_by_layer.txt
+++++#SBATCH -o res/balance_loss.txt
++++ #SBATCH -c 32
++++ #SBATCH --gres=gpu:V100:1
++++ #SBATCH --exclude dell-gpu-23
++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++++index a47022a..49375bc 100644
++++--- a/code/diffuser/models/diffusion.py
+++++++ b/code/diffuser/models/diffusion.py
++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         pred_a = self.inv_model(x_comb_t)
++++ 
++++         # get pred_a by inv_model from generated x_t and x_t_1
++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++++ 
++++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++index 3b470ca..410268d 100644
++++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
++++ +            pass
++++  
++++          if self.train_only_inv:
++++-             # Calculating inv loss
++++\ No newline at end of file
+++++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++++index 516ab7e..81cd533 100644
+++++--- a/code/analysis/train.slurm
++++++++ b/code/analysis/train.slurm
+++++@@ -1,6 +1,6 @@
+++++ #!/bin/bash
+++++ #SBATCH -J load-ddfuser-grid
+++++-#SBATCH -o res/unfreeze_by_layer.txt
++++++#SBATCH -o res/balance_loss.txt
+++++ #SBATCH -c 32
+++++ #SBATCH --gres=gpu:V100:1
+++++ #SBATCH --exclude dell-gpu-23
+++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++++index a47022a..49375bc 100644
+++++--- a/code/diffuser/models/diffusion.py
++++++++ b/code/diffuser/models/diffusion.py
+++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++++         pred_a = self.inv_model(x_comb_t)
+++++ 
+++++         # get pred_a by inv_model from generated x_t and x_t_1
+++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++++ 
+++++         return loss, info, balance_loss
++++\ No newline at end of file
++++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++++index 516ab7e..81cd533 100644
++++--- a/code/analysis/train.slurm
+++++++ b/code/analysis/train.slurm
++++@@ -1,6 +1,6 @@
++++ #!/bin/bash
++++ #SBATCH -J load-ddfuser-grid
++++-#SBATCH -o res/unfreeze_by_layer.txt
+++++#SBATCH -o res/balance_loss.txt
++++ #SBATCH -c 32
++++ #SBATCH --gres=gpu:V100:1
++++ #SBATCH --exclude dell-gpu-23
++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++++index a47022a..ea24e74 100644
++++--- a/code/diffuser/models/diffusion.py
+++++++ b/code/diffuser/models/diffusion.py
++++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         obs = x_noisy - x_recon
++++         # decode obs to 409 dim
++++         decoded_obs = decode_data(self.encode_model, obs)
++++-        # assert decoded_obs.shape == (32, 100, 409)
+++++        assert decoded_obs.shape == (32, 100, 409)
++++         x_t = obs[:, :-1, :]
++++         x_t_1 = obs[:, 1:, :]
++++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         pred_a = self.inv_model(x_comb_t)
++++ 
++++         # get pred_a by inv_model from generated x_t and x_t_1
++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++++ 
++++         return loss, info, balance_loss
++++ 
++++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++++index 351f9d2..6721527 100644
++++--- a/code/diffuser/utils/training.py
+++++++ b/code/diffuser/utils/training.py
++++@@ -114,6 +114,8 @@ class Trainer(object):
++++         for step in range(n_train_steps):
++++             for i in range(self.gradient_accumulate_every):
++++                 batch = next(self.dataloader)
+++++                print(batch.shape)
+++++                continue
++++                 batch = batch_to_device(batch, device=self.device)
++++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++++                 loss = loss / self.gradient_accumulate_everydiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++index 3b470ca..5b2bb45 100644
++++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++@@ -22,4 +22,108 @@ index d62dc31..a47022a 100644
++++ +            pass
++++  
++++          if self.train_only_inv:
++++-             # Calculating inv loss
++++\ No newline at end of file
+++++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++++index 516ab7e..81cd533 100644
+++++--- a/code/analysis/train.slurm
++++++++ b/code/analysis/train.slurm
+++++@@ -1,6 +1,6 @@
+++++ #!/bin/bash
+++++ #SBATCH -J load-ddfuser-grid
+++++-#SBATCH -o res/unfreeze_by_layer.txt
++++++#SBATCH -o res/balance_loss.txt
+++++ #SBATCH -c 32
+++++ #SBATCH --gres=gpu:V100:1
+++++ #SBATCH --exclude dell-gpu-23
+++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++++index a47022a..49375bc 100644
+++++--- a/code/diffuser/models/diffusion.py
++++++++ b/code/diffuser/models/diffusion.py
+++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++++         pred_a = self.inv_model(x_comb_t)
+++++ 
+++++         # get pred_a by inv_model from generated x_t and x_t_1
+++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++++ 
+++++         return loss, info, balance_lossdiff --git a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++index 3b470ca..410268d 100644
+++++--- a/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
++++++++ b/balance_loss/default_inv/predict_epsilon_200_1000000.0/dropout_0.25/hopper-medium-expert-v2/100/index.diff
+++++@@ -22,4 +22,27 @@ index d62dc31..a47022a 100644
+++++ +            pass
+++++  
+++++          if self.train_only_inv:
+++++-             # Calculating inv loss
+++++\ No newline at end of file
++++++             # Calculating inv lossdiff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++++++index 516ab7e..81cd533 100644
++++++--- a/code/analysis/train.slurm
+++++++++ b/code/analysis/train.slurm
++++++@@ -1,6 +1,6 @@
++++++ #!/bin/bash
++++++ #SBATCH -J load-ddfuser-grid
++++++-#SBATCH -o res/unfreeze_by_layer.txt
+++++++#SBATCH -o res/balance_loss.txt
++++++ #SBATCH -c 32
++++++ #SBATCH --gres=gpu:V100:1
++++++ #SBATCH --exclude dell-gpu-23
++++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++++++index a47022a..49375bc 100644
++++++--- a/code/diffuser/models/diffusion.py
+++++++++ b/code/diffuser/models/diffusion.py
++++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++++         pred_a = self.inv_model(x_comb_t)
++++++ 
++++++         # get pred_a by inv_model from generated x_t and x_t_1
++++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++++++ 
++++++         return loss, info, balance_loss
+++++\ No newline at end of file
+++++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++++index 516ab7e..81cd533 100644
+++++--- a/code/analysis/train.slurm
++++++++ b/code/analysis/train.slurm
+++++@@ -1,6 +1,6 @@
+++++ #!/bin/bash
+++++ #SBATCH -J load-ddfuser-grid
+++++-#SBATCH -o res/unfreeze_by_layer.txt
++++++#SBATCH -o res/balance_loss.txt
+++++ #SBATCH -c 32
+++++ #SBATCH --gres=gpu:V100:1
+++++ #SBATCH --exclude dell-gpu-23
+++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++++index a47022a..ea24e74 100644
+++++--- a/code/diffuser/models/diffusion.py
++++++++ b/code/diffuser/models/diffusion.py
+++++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++++         obs = x_noisy - x_recon
+++++         # decode obs to 409 dim
+++++         decoded_obs = decode_data(self.encode_model, obs)
+++++-        # assert decoded_obs.shape == (32, 100, 409)
++++++        assert decoded_obs.shape == (32, 100, 409)
+++++         x_t = obs[:, :-1, :]
+++++         x_t_1 = obs[:, 1:, :]
+++++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++++         pred_a = self.inv_model(x_comb_t)
+++++ 
+++++         # get pred_a by inv_model from generated x_t and x_t_1
+++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++++ 
+++++         return loss, info, balance_loss
+++++ 
+++++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+++++index 351f9d2..6721527 100644
+++++--- a/code/diffuser/utils/training.py
++++++++ b/code/diffuser/utils/training.py
+++++@@ -114,6 +114,8 @@ class Trainer(object):
+++++         for step in range(n_train_steps):
+++++             for i in range(self.gradient_accumulate_every):
+++++                 batch = next(self.dataloader)
++++++                print(batch.shape)
++++++                continue
+++++                 batch = batch_to_device(batch, device=self.device)
+++++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+++++                 loss = loss / self.gradient_accumulate_every
++++\ No newline at end of file
++++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++++index 516ab7e..81cd533 100644
++++--- a/code/analysis/train.slurm
+++++++ b/code/analysis/train.slurm
++++@@ -1,6 +1,6 @@
++++ #!/bin/bash
++++ #SBATCH -J load-ddfuser-grid
++++-#SBATCH -o res/unfreeze_by_layer.txt
+++++#SBATCH -o res/balance_loss.txt
++++ #SBATCH -c 32
++++ #SBATCH --gres=gpu:V100:1
++++ #SBATCH --exclude dell-gpu-23
++++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++++index a47022a..ea24e74 100644
++++--- a/code/diffuser/models/diffusion.py
+++++++ b/code/diffuser/models/diffusion.py
++++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         obs = x_noisy - x_recon
++++         # decode obs to 409 dim
++++         decoded_obs = decode_data(self.encode_model, obs)
++++-        # assert decoded_obs.shape == (32, 100, 409)
+++++        assert decoded_obs.shape == (32, 100, 409)
++++         x_t = obs[:, :-1, :]
++++         x_t_1 = obs[:, 1:, :]
++++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++++         pred_a = self.inv_model(x_comb_t)
++++ 
++++         # get pred_a by inv_model from generated x_t and x_t_1
++++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++++ 
++++         return loss, info, balance_loss
++++ 
++++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++++index 351f9d2..187050e 100644
++++--- a/code/diffuser/utils/training.py
+++++++ b/code/diffuser/utils/training.py
++++@@ -114,6 +114,9 @@ class Trainer(object):
++++         for step in range(n_train_steps):
++++             for i in range(self.gradient_accumulate_every):
++++                 batch = next(self.dataloader)
+++++                traj, cond, ret = batch
+++++                print(traj.shape)
+++++                continue
++++                 batch = batch_to_device(batch, device=self.device)
++++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++++                 loss = loss / self.gradient_accumulate_every
+++\ No newline at end of file
+++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+++index 516ab7e..81cd533 100644
+++--- a/code/analysis/train.slurm
++++++ b/code/analysis/train.slurm
+++@@ -1,6 +1,6 @@
+++ #!/bin/bash
+++ #SBATCH -J load-ddfuser-grid
+++-#SBATCH -o res/unfreeze_by_layer.txt
++++#SBATCH -o res/balance_loss.txt
+++ #SBATCH -c 32
+++ #SBATCH --gres=gpu:V100:1
+++ #SBATCH --exclude dell-gpu-23
+++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+++index a47022a..ea24e74 100644
+++--- a/code/diffuser/models/diffusion.py
++++++ b/code/diffuser/models/diffusion.py
+++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         obs = x_noisy - x_recon
+++         # decode obs to 409 dim
+++         decoded_obs = decode_data(self.encode_model, obs)
+++-        # assert decoded_obs.shape == (32, 100, 409)
++++        assert decoded_obs.shape == (32, 100, 409)
+++         x_t = obs[:, :-1, :]
+++         x_t_1 = obs[:, 1:, :]
+++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+++         pred_a = self.inv_model(x_comb_t)
+++ 
+++         # get pred_a by inv_model from generated x_t and x_t_1
+++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+++ 
+++         return loss, info, balance_loss
+++ 
+++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+++index 351f9d2..7910030 100644
+++--- a/code/diffuser/utils/training.py
++++++ b/code/diffuser/utils/training.py
+++@@ -114,11 +114,15 @@ class Trainer(object):
+++         for step in range(n_train_steps):
+++             for i in range(self.gradient_accumulate_every):
+++                 batch = next(self.dataloader)
++++                traj, cond, ret = batch
++++                print(traj.shape)
++++                continue
+++                 batch = batch_to_device(batch, device=self.device)
+++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+++                 loss = loss / self.gradient_accumulate_every
+++                 loss.backward()
+++ 
++++            continue
+++             self.optimizer.step()
+++             self.optimizer.zero_grad()
++\ No newline at end of file
++diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
++index 516ab7e..81cd533 100644
++--- a/code/analysis/train.slurm
+++++ b/code/analysis/train.slurm
++@@ -1,6 +1,6 @@
++ #!/bin/bash
++ #SBATCH -J load-ddfuser-grid
++-#SBATCH -o res/unfreeze_by_layer.txt
+++#SBATCH -o res/balance_loss.txt
++ #SBATCH -c 32
++ #SBATCH --gres=gpu:V100:1
++ #SBATCH --exclude dell-gpu-23
++diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
++index a47022a..ea24e74 100644
++--- a/code/diffuser/models/diffusion.py
+++++ b/code/diffuser/models/diffusion.py
++@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         obs = x_noisy - x_recon
++         # decode obs to 409 dim
++         decoded_obs = decode_data(self.encode_model, obs)
++-        # assert decoded_obs.shape == (32, 100, 409)
+++        assert decoded_obs.shape == (32, 100, 409)
++         x_t = obs[:, :-1, :]
++         x_t_1 = obs[:, 1:, :]
++         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
++@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
++         pred_a = self.inv_model(x_comb_t)
++ 
++         # get pred_a by inv_model from generated x_t and x_t_1
++-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
++ 
++         return loss, info, balance_loss
++ 
++diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
++index 351f9d2..6411878 100644
++--- a/code/diffuser/utils/training.py
+++++ b/code/diffuser/utils/training.py
++@@ -114,11 +114,16 @@ class Trainer(object):
++         for step in range(n_train_steps):
++             for i in range(self.gradient_accumulate_every):
++                 batch = next(self.dataloader)
+++                traj, cond, ret = batch
+++                print(traj.shape)
+++                assert traj.shape[0] == 32
+++                continue
++                 batch = batch_to_device(batch, device=self.device)
++                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
++                 loss = loss / self.gradient_accumulate_every
++                 loss.backward()
++ 
+++            continue
++             self.optimizer.step()
++             self.optimizer.zero_grad()
+\ No newline at end of file
+diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
+index 516ab7e..81cd533 100644
+--- a/code/analysis/train.slurm
++++ b/code/analysis/train.slurm
+@@ -1,6 +1,6 @@
+ #!/bin/bash
+ #SBATCH -J load-ddfuser-grid
+-#SBATCH -o res/unfreeze_by_layer.txt
++#SBATCH -o res/balance_loss.txt
+ #SBATCH -c 32
+ #SBATCH --gres=gpu:V100:1
+ #SBATCH --exclude dell-gpu-23
+diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
+index a47022a..ea24e74 100644
+--- a/code/diffuser/models/diffusion.py
++++ b/code/diffuser/models/diffusion.py
+@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         obs = x_noisy - x_recon
+         # decode obs to 409 dim
+         decoded_obs = decode_data(self.encode_model, obs)
+-        # assert decoded_obs.shape == (32, 100, 409)
++        assert decoded_obs.shape == (32, 100, 409)
+         x_t = obs[:, :-1, :]
+         x_t_1 = obs[:, 1:, :]
+         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
+@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
+         pred_a = self.inv_model(x_comb_t)
+ 
+         # get pred_a by inv_model from generated x_t and x_t_1
+-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
++        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
+ 
+         return loss, info, balance_loss
+ 
+diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
+index 351f9d2..e08eb07 100644
+--- a/code/diffuser/utils/training.py
++++ b/code/diffuser/utils/training.py
+@@ -114,11 +114,16 @@ class Trainer(object):
+         for step in range(n_train_steps):
+             for i in range(self.gradient_accumulate_every):
+                 batch = next(self.dataloader)
++                traj, cond, ret = batch
++                print(f"i: {i}, step: {step}, shape0: {traj.shape[0]}")
++                assert traj.shape[0] == 32
++                continue
+                 batch = batch_to_device(batch, device=self.device)
+                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
+                 loss = loss / self.gradient_accumulate_every
+                 loss.backward()
+ 
++            continue
+             self.optimizer.step()
+             self.optimizer.zero_grad()
\ No newline at end of file
diff --git a/code/analysis/train.slurm b/code/analysis/train.slurm
index 516ab7e..81cd533 100644
--- a/code/analysis/train.slurm
+++ b/code/analysis/train.slurm
@@ -1,6 +1,6 @@
 #!/bin/bash
 #SBATCH -J load-ddfuser-grid
-#SBATCH -o res/unfreeze_by_layer.txt
+#SBATCH -o res/balance_loss.txt
 #SBATCH -c 32
 #SBATCH --gres=gpu:V100:1
 #SBATCH --exclude dell-gpu-23
diff --git a/code/diffuser/models/diffusion.py b/code/diffuser/models/diffusion.py
index a47022a..ea24e74 100644
--- a/code/diffuser/models/diffusion.py
+++ b/code/diffuser/models/diffusion.py
@@ -574,7 +574,7 @@ class GaussianInvDynDiffusion(nn.Module):
         obs = x_noisy - x_recon
         # decode obs to 409 dim
         decoded_obs = decode_data(self.encode_model, obs)
-        # assert decoded_obs.shape == (32, 100, 409)
+        assert decoded_obs.shape == (32, 100, 409)
         x_t = obs[:, :-1, :]
         x_t_1 = obs[:, 1:, :]
         x_comb_t = torch.cat([x_t, x_t_1], dim=-1)
@@ -582,7 +582,7 @@ class GaussianInvDynDiffusion(nn.Module):
         pred_a = self.inv_model(x_comb_t)
 
         # get pred_a by inv_model from generated x_t and x_t_1
-        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(grid_config.batch_size, 99, self.action_dim))
+        balance_loss = self.calculate_balance_loss(decoded_obs, pred_a.reshape(-1, 99, self.action_dim))
 
         return loss, info, balance_loss
 
diff --git a/code/diffuser/utils/training.py b/code/diffuser/utils/training.py
index 351f9d2..b59f01d 100644
--- a/code/diffuser/utils/training.py
+++ b/code/diffuser/utils/training.py
@@ -79,7 +79,7 @@ class Trainer(object):
         self.dataset = dataset
 
         self.dataloader = cycle(torch.utils.data.DataLoader(
-            self.dataset, batch_size=train_batch_size, num_workers=0, shuffle=True, pin_memory=True
+            self.dataset, batch_size=train_batch_size, num_workers=0, shuffle=True, pin_memory=True, drop_last=True
         ))
         self.dataloader_vis = cycle(torch.utils.data.DataLoader(
             self.dataset, batch_size=1, num_workers=0, shuffle=True, pin_memory=True
@@ -114,11 +114,16 @@ class Trainer(object):
         for step in range(n_train_steps):
             for i in range(self.gradient_accumulate_every):
                 batch = next(self.dataloader)
+                traj, cond, ret = batch
+                print(f"i: {i}, step: {step}, shape0: {traj.shape[0]}")
+                assert traj.shape[0] == 32
+                continue
                 batch = batch_to_device(batch, device=self.device)
                 loss, infos = self.model.loss(epoch, *batch) # batch : trajectories, conditions, returns, 参考 SequenceDataset.__getitem__()
                 loss = loss / self.gradient_accumulate_every
                 loss.backward()
 
+            continue
             self.optimizer.step()
             self.optimizer.zero_grad()